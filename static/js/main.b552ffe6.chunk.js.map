{"version":3,"sources":["common/date.js","env/envVars.js","components/Spinner.js","components/LoadingOpacity.js","components/CityDataItem.js","components/Console.js","components/MapBox.js","components/Link.js","components/Footer.js","components/LinePlot.js","components/BarPlot.js","components/HorizontalBarPlot.js","common/MapDataExtractor.js","texts/mathFormulas.js","texts/texts.js","components/Tabs.js","components/MainPage.js","App.js","serviceWorker.js","index.js"],"names":["daysBetween","d0","d1","Math","round","abs","formatDate","date","month","getMonth","day","getDate","year","getFullYear","length","join","addDays","days","dt","Date","valueOf","setDate","require","env","MAPBOX_ACCESS_TOKEN","process","BACKEND_URL","MAPBOX_ACCESS_TOKEN_LIST","str","sep","split","read_list","Spinner","className","LoadingOpacity","loading","text","style","styles","lastUpdate","color","fontSize","cityName","dataValue","CityDataItem","name","state","cases","deaths","Console","daysAgo","value","cities","animated","zoom","lat","lng","onHeatmapChange","heatmapType","maxDays","onAnimatedChange","onSliderChange","onSliderRelease","hidden","onHiddenChange","left","rel","type","href","onClick","min","max","step","onChange","e","target","onMouseUp","checked","display","justifyContent","lineHeight","marginBottom","itemRenderer","index","key","data","city","totalCases","pageSize","textAlign","fontStyle","mapboxgl","accessToken","MapBox","props","changeSlider","sliderValue","parseInt","setState","initialDate","onSliderChangeEndedAsync","a","map","setFilter","getTime","updateVisibleCities","onSelectedDateChanged","handleMapTypeChange","event","mapType","layers","setLayoutProperty","handleAnimateChange","animate","animatedStep","setInteractive","isInteractive","mapObj","onSetFinished","undefined","properties","enable","forEach","prop","disable","isMapInteractive","baseUrl","onSourceLoadBegin","onSourceLoadFinished","listableCities","loadState","loadingText","featuresLength","consoleHidden","this","queryRenderedFeatures","features","cityData","perDate","sort","b","feature","hasOwnProperty","timestamp","push","Object","keys","force","setTimeout","listable","getHeatmapFeatures","processed","processVisibleCities","reverse","onVisibleCitiesChange","NotificationManager","info","animateTimeout","setInterval","clearInterval","containerStyle","ref","el","mapContainer","Map","container","center","minPitch","maxPitch","pitchWithRotate","logoPosition","on","getCenter","toFixed","getZoom","once","addSource","addLayer","Component","SimpleLink","children","url","Footer","fixDecimalPlaces","num","decimalPlaces","String","Number","isInteger","toString","decimalOrDivisor","number","toLocaleString","abbreviateNumber","fixed","toPrecision","k","floor","slice","c","pow","d","formatNumber","showSometimes","n","current","showEvery","theme","axis","textColor","tickColor","grid","stroke","strokeWidth","pointLabel","dots","scales","linear","stacked","linearZeroOne","linearMinusOnePlusOne","log10","base","Tootip","node","lasty","point","id","filter","serieId","y","lastDiff","yFormatted","lastDiffStr","serieColor","backgroundColor","padding","border","borderColor","borderRadius","boxShadow","xFormatted","LinePLot","colors","scheme","yScaleType","margin","top","right","bottom","tooltip","xScale","format","yScale","xFormat","curve","axisTop","axisRight","axisBottom","orient","tickSize","tickPadding","tickRotation","legend","legendOffset","legendPosition","axisLeft","pointSize","pointBorderWidth","pointColor","pointBorderColor","from","enablePointLabel","pointLabelYOffset","useMesh","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","itemBackground","BarPlot","xTitle","yTitle","groupMode","layout","indexBy","minValue","modifiers","labelSkipWidth","labelSkipHeight","labelTextColor","dataFrom","motionStiffness","motionDamping","HorizontalBarPlot","MapDataExtractor","processedData","rawData","untilDate","filteredIndexes","casesPlotData","casesGrowthFactorPlotData","deathsPlotData","deathsGrowthRateData","deathsOverCasesData","newCasesData","newDeathsData","casesDeathsPerStateAndCityData","setHours","reduce","sum","newCases","newDeaths","array","growthFactor","pair","x","generateCasesPlotData","yGrowthFactor","generateDeathsPlotData","deathsDates","casesDates","dates","includes","deathsData","casesData","deathsOverCases","i","casesDay","deathsDay","maxItems","perState","perCity","perDayData","states","lastDay","report","casos","sortedPerState","sortedPerCity","filteredPerState","filteredPerCity","plotData","visibleCitiesPerDate","Array","Set","showStates","showCities","GrowthRateFormula","xmlns","displaystyle","GrowthRate","GrGratherThenZero","GrLowerThenZero","GrApproxZero","aboutSite","presentation","youCanDo","mainExplanation","parameters","about","specialChars","pointUp","pointDown","dataSource","mainText","perLocation","explainMax","amountCities","amountStates","ChartTabs","openTab","activeIndex","onSelectedChanged","tabTitles","toLowerCase","selectedIndex","title","isActive","formatTitleToUrl","Element","width","minHeight","renderIfSelectedOnly","scrollOffset","offset","pos","window","pageYOffset","document","documentElement","scrollTop","body","ScrollButtons","texts","LinePlotWrapper","LinePlot","console","error","HorizontalBarPlotWrapper","MainPage","complete","loadingBarProgress","clearIntervals","onMapLoadedHandler","onLoaderFinished","infiniteLoad","random","timers","updateDatasetIfNeeded","scheduleUpdate","makeDataset","selectedDate","handlePlotDataChanged","visibleCities","perDateChartName","makeTitle","tabs","currentTab","onOpened","handlePlotDateChanged","onMapUpdatingHandler","isLoading","onTabChangedHandler","generateNewCasesPlotData","generateNewDeathsPlotData","casesGrowthFactor","generateCasesGrowthFactorPlotData","deathGrowthFactor","generateDeathsGrowthFactorPlotData","generateDeathsOverCases","casesDeathsPerLocation","generateCasesDeathsPerStateAndCity","log","covidCasesGeoJson","covidCasesJson","timer","progress","height","maxHeight","removeZeroes","marginLeft","marginRight","App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","getElementById","URL","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b552ffe6.chunk.js","sourcesContent":["export const ONE_DAY = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds\n\nexport function daysBetween(d0, d1) {\n    return Math.round(Math.abs((d0 - d1) / ONE_DAY));\n}\n\nexport function formatDate(date) {\n    let month = '' + (date.getMonth() + 1)\n    let day = '' + date.getDate()\n    let year = date.getFullYear()\n\n    if (month.length < 2) {\n        month = '0' + month;\n    }\n    if (day.length < 2) {\n        day = '0' + day;\n    }\n\n    return [day, month, year].join('/');\n}\n\nexport function addDays(date, days) {\n    var dt = new Date(date.valueOf());\n    dt.setDate(dt.getDate() + days);\n    return dt;\n}\n\nexport function toTimestamp(strDate){\n    var datum = Date.parse(strDate);\n    return datum/1000;\n }","require('dotenv/config');\n\nexport function read_list(str, sep=','){\n    if(str){\n        return str.split(sep)\n    }\n}\n\n\nconst env = {\n    MAPBOX_ACCESS_TOKEN : process.env.REACT_APP_MAPBOX_ACCESS_TOKEN,\n    BACKEND_URL: process.env.REACT_APP_BACKEND_URL || 'http://localhost:3000',\n    MAPBOX_ACCESS_TOKEN_LIST: read_list(process.env.MAPBOX_ACCESS_TOKEN_LIST),\n}\n\n\n\n\nexport default env","import React from 'react'\nimport '../style/SpinnerStyle.css'\n\nexport default function Spinner() {\n    return (\n        <div>\n            <div className=\"spinner\"> </div>\n        </div>\n        \n    )\n}\n","import React from 'react'\nimport Spinner from './Spinner'\n\nexport default function LoadingOpacity({ loading, text, style }) {\n    return (\n        <div style={{...style}} className={loading ? 'loadingVisible' : 'loadingInvisible'}>\n            {\n                loading && (\n                    <div className='opacityLoaderText'>\n                        <Spinner/>\n                        {text && <span>{text}</span>}\n                    </div>\n                )\n            }\n        </div>\n    )\n}","import React from 'react';\nimport { formatDate } from '../common/date'\n\nconst CityDataItem = ({ name, state, date, cases, deaths }) => {\n    return (\n        <div className='cityListItem'>\n            <span style={styles.lastUpdate}>Última atualização {formatDate(date)}</span><br />\n            <span style={styles.cityName}><b>{name}/{state}</b></span><br />\n            <span style={styles.dataValue}><b>Casos:</b> {cases}</span>\n            <span> | </span>\n            <span style={styles.dataValue}><b>Óbitos:</b> {deaths}</span>\n        </div>)\n};\n\nconst styles = {\n    lastUpdate: {\n        color: '#949494',\n        fontSize: '.6em'\n    },\n    cityName: {\n        fontSize: '1em'\n    },\n    dataValue: {\n        color: '#3b3b3b',\n        fontSize: '.9em'\n    }\n}\n\nexport default CityDataItem","import React from 'react'\nimport ReactList from 'react-list'\nimport { formatDate } from '../common/date'\nimport CityDataItem from './CityDataItem'\n\nconst Console = ({ daysAgo, date, value, cities, zoom, lat, lng,\n    animated, onHeatmapChange, heatmapType, maxDays, onAnimatedChange,\n    onSliderChange, onSliderRelease, hidden, onHiddenChange }) => {\n\n    const renderCityListItem = (index, key) => {\n        const data = cities[index]\n        return (<CityDataItem name={data.city}\n            state={data.state}\n            date={new Date(data.date)}\n            cases={data.totalCases} deaths={data.deaths} key={key} />)\n    }\n\n    return (\n        <nav className='console' style={hidden ? { left: -182, } : { left: 0 }}>\n            <link rel='stylesheet' type='text/css' href='https://cdnjs.cloudflare.com/ajax/libs/foundation/6.5.1/css/foundation-float.min.css' />\n\n            <div onClick={() => onHiddenChange(!hidden)} className='hideConsoleButton'\n                style={hidden ? { fontSize: 20 } : { fontSize: 12 }}\n            >\n                <span>{hidden ? '▶' : '◀'}</span>\n            </div>\n\n            <h1 className='consoleTitle'>COVID-19 no Brasil</h1>\n            <label>\n                <span style={{ fontSize: '1.1em' }}> Até o dia <strong>\n                    {formatDate(date)}</strong> {daysAgo}</span>\n                <input\n                    className='sliderDate'\n                    type='range'\n                    min='0'\n                    max={maxDays}\n                    step='1'\n                    value={value}\n                    onChange={(e) => onSliderChange(e.target.value)}\n                    onMouseUp={(e) => onSliderRelease(e.target.value)} />\n            </label>\n            <form>\n                <label>\n                    <input\n                        name=\"animate\"\n                        type=\"checkbox\"\n                        checked={animated}\n                        onChange={onAnimatedChange} />\n                    Animar\n                        </label>\n            </form>\n\n            <form style={{ display: 'flex', justifyContent: 'space-around' }}>\n                <label style={{ lineHeight: '19px' }}>\n                    <input type=\"radio\" value=\"infected\"\n                        style={{ marginBottom: '3px' }}\n                        checked={heatmapType === 'infected'}\n                        onChange={(e) => onHeatmapChange(e)} />\n                    Casos\n                       </label>\n                <label style={{ lineHeight: '19px' }}>\n                    <input type=\"radio\" value=\"death\"\n                        style={{ marginBottom: '3px' }}\n                        checked={heatmapType === 'death'}\n                        onChange={(e) => onHeatmapChange(e)} />\n                    Óbitos\n                      </label>\n            </form>\n            <div>\n\n            </div>\n            <div className='cityList'>\n                {(cities.length > 0) ? (<ReactList\n                    itemRenderer={/*::*/renderCityListItem}\n                    length={cities.length}\n                    type='uniform'\n                    pageSize={3}\n                />)\n                    :\n                    (<p style={{ textAlign: 'center', fontStyle: 'italic' }}>\n                        (Use o zoom e a navegação pelo mapa para ver os detalhes de cada localidade.)</p>)}\n            </div>\n            {/*\n            <div style={{ color: 'gray', fontSize: '0.5em', bottom: 0, position: 'absolute' }}>\n                <p>\n                    <span><strong>Zoom: </strong>{zoom}</span>\n                    <span> | </span>\n                    <span><strong>Centro: </strong>{lat}, {lng}</span>\n                </p>\n            </div>\n            */}\n        </nav>\n    )\n}\n\nexport default Console","import React, { Component } from 'react';\nimport mapboxgl from 'mapbox-gl'\nimport { daysBetween, addDays } from '../common/date'\nimport env from '../env/envVars'\nimport { NotificationManager } from 'react-notifications';\nimport LoadingOpacity from '../components/LoadingOpacity'\nimport Console from './Console'\n\nmapboxgl.accessToken = env.MAPBOX_ACCESS_TOKEN\n\nclass MapBox extends Component {\n    constructor(props) {\n        super(props);\n\n        let initialDate = new Date('2020-02-25')\n\n        this.baseUrl = env.BACKEND_URL\n\n        this.onSourceLoadBegin = this.props.onSourceLoadBegin\n        this.onSourceLoadFinished = this.props.onSourceLoadFinished\n\n        this.state = {\n            lng: props.lng || 5,\n            lat: props.lat || 34,\n            zoom: props.zoom || 2,\n            date: new Date(),\n            sliderValue: daysBetween(new Date('2020-02-25'), new Date()),\n            data: this.props.data,\n            listableCities: [],\n            animate: false,\n            initialDate: initialDate,\n            maxDays: daysBetween(initialDate, new Date()),\n            mapType: 'infected',\n            loadState: 'loading',\n            isMapInteractive: false,\n            loadingText: 'Carregando mapa do Brasil...',\n            featuresLength: undefined,\n            consoleHidden: false,\n        };\n    }\n\n    getHeatmapFeatures() {\n        return this.state.map.queryRenderedFeatures({ layers: ['all-cities'] })\n    }\n\n    processVisibleCities(features) {\n\n        if (!features || features.length === 0) {\n            return [[], {}]\n        }\n\n        let cityData = {}\n        let perDate = {}\n        if (features) {\n            features = features.sort((a, b) => new Date(a.date) - new Date(b.date))\n                .map(feature => feature.properties)\n\n            for (let feature of features) {\n                let city = feature.city\n                if (!perDate.hasOwnProperty(feature.date)) perDate[feature.date] = []\n                if (!cityData.hasOwnProperty(city) && feature.timestamp <= this.state.date.getTime()) cityData[city] = feature\n                perDate[feature.date].push(feature)\n            }\n            return [Object.keys(cityData).map(key => cityData[key]), perDate];\n        }\n        return [[], {}]\n    }\n\n    updateVisibleCities(force = false) {\n        this.setInteractive(false, this.state.map, () => {\n\n            setTimeout(() => {\n                this.setState({\n                    loadingText: 'Obtendo cidades visíveis...'\n                })\n\n                let cityData, perDate, listable\n                let features = this.getHeatmapFeatures()\n\n                if (\n                    force ||\n                    features.length < 50 ||\n                    this.state.featuresLength !== features.length ||\n                    this.state.animate\n                ) {\n\n                    this.setState({\n                        loadingText: 'Gerando dados para a lista de cidades e gráficos...',\n                        featuresLength: features.length\n                    })\n\n                    const processed = this.processVisibleCities(features)\n                    cityData = processed[0]\n                    perDate = processed[1]\n\n                    listable = cityData.sort((a, b) => a.totalCases - b.totalCases).reverse()\n\n                    this.setState({ listableCities: listable })\n\n                    this.props.onVisibleCitiesChange &&\n                        this.props.onVisibleCitiesChange(cityData, perDate)\n\n                    if (!this.state.animate) setTimeout(() => {\n                        this.setInteractive(true, this.state.map)\n                    }, 30)\n                }\n                else {\n                    if (!this.state.animate) setTimeout(() => {\n                        this.setInteractive(true, this.state.map)\n                    }, 30)\n                }\n            }, 20)\n\n        })\n    }\n\n    animatedStep() {\n        if (this.state.animate) {\n            this.setInteractive(false)\n            NotificationManager.info(\"A interação com o mapa será desetivada enquanto a animação ocorrer.\", \"Animação ativada\")\n\n            if (this.state.sliderValue >= this.state.maxDays) {\n                this.changeSlider(0)\n                this.onSliderChangeEndedAsync(0)\n            }\n\n            this.animateTimeout = setInterval(() => {\n                if (this.state.sliderValue <= this.state.maxDays) {\n                    this.changeSlider(this.state.sliderValue + 1)\n                    this.onSliderChangeEndedAsync(this.state.sliderValue + 1)\n                }\n                else {\n                    this.changeSlider(0)\n                    this.onSliderChangeEndedAsync(0)\n                }\n            }, 4000);\n        }\n        else if (this.animateTimeout) {\n            this.state.loadState === 'loaded' && this.setInteractive(true)\n            clearInterval(this.animateTimeout)\n        }\n    }\n\n    changeSlider = (value) => {\n        let sliderValue = parseInt(value)\n        this.setState({\n            sliderValue: sliderValue,\n            date: addDays(this.state.initialDate, sliderValue),\n        })\n    }\n\n    onSliderChangeEndedAsync = async (value) => {\n        let date = addDays(this.state.initialDate, parseInt(value))\n        this.state.map.setFilter('covid-heatmap', ['<=', ['number', ['get', 'timestamp']], date.getTime()])\n        this.state.map.setFilter('covid-heatmap-death', ['<=', ['number', ['get', 'timestamp']], date.getTime()])\n        this.state.map.setFilter('covid-point', ['==', ['number', ['get', 'timestamp']], date.getTime()])\n        this.updateVisibleCities()\n        this.props.onSelectedDateChanged && this.props.onSelectedDateChanged(date)\n    }\n\n    handleMapTypeChange = (event) => {\n        this.setState({ mapType: event.target.value })\n\n        let layers = {\n            death: 'covid-heatmap-death',\n            infected: 'covid-heatmap'\n        }\n\n        if (event.target.value === 'infected') {\n            this.state.map.setLayoutProperty(layers.infected, 'visibility', 'visible')\n            this.state.map.setLayoutProperty(layers.death, 'visibility', 'none')\n        } else {\n            this.state.map.setLayoutProperty(layers.infected, 'visibility', 'none')\n            this.state.map.setLayoutProperty(layers.death, 'visibility', 'visible')\n        }\n    }\n\n    handleAnimateChange = (event) => {\n        this.setState({ animate: event.target.checked }, () => {\n            this.animatedStep()\n        })\n    }\n\n    render() {\n        const daysAgo = () => {\n            let daysAgo = daysBetween(this.state.date, new Date())\n            if (daysAgo === 0) return <span>(hoje)</span>\n            if (daysAgo === 1) return (<span>(ontem)</span>)\n            else return (<span>(há <strong>{daysAgo}</strong> dias)</span>)\n        }\n\n        return (\n            <div style={this.props.containerStyle}>\n                <LoadingOpacity\n                    loading={!this.state.isMapInteractive && !this.state.animate}\n                    style={this.props.style}\n                    text={this.state.loadingText}\n                />\n\n                <Console\n                    daysAgo={daysAgo()}\n                    date={this.state.date}\n                    maxDays={this.state.maxDays}\n                    onSliderChange={this.changeSlider}\n                    onSliderRelease={this.onSliderChangeEndedAsync}\n                    value={this.state.sliderValue}\n                    animated={this.state.animate}\n                    onAnimatedChange={this.handleAnimateChange}\n                    heatmapType={this.state.mapType}\n                    onHeatmapChange={this.handleMapTypeChange}\n                    cities={this.state.listableCities}\n                    zoom={this.state.zoom}\n                    lat={this.state.lat}\n                    lng={this.state.lng}\n                    hidden={this.state.consoleHidden}\n                    onHiddenChange={(hidden)=>{ this.setState({consoleHidden: hidden}) }}\n                />\n                <div style={this.props.style} ref={el => this.mapContainer = el} />\n            </div>\n        )\n    }\n\n    setInteractive = (isInteractive, mapObj, onSetFinished = undefined) => {\n        let map = mapObj || this.state.map\n        const properties = ['boxZoom', 'scrollZoom', 'dragPan', 'dragRotate',\n            'keyboard', 'doubleClickZoom', 'touchZoomRotate']\n\n        const enable = () => properties.forEach((prop) => { map[prop].enable() })\n        const disable = () => properties.forEach((prop) => { map[prop].disable() })\n\n        this.setState({\n            isMapInteractive: isInteractive,\n        }, () => {\n            isInteractive ? enable() : disable()\n            onSetFinished && onSetFinished()\n        })\n    }\n\n    componentDidMount() {\n\n        this.onSourceLoadBegin && this.onSourceLoadBegin()\n\n        const map = new mapboxgl.Map({\n            container: this.mapContainer,\n            style: 'mapbox://styles/aest/ck93dlpxn00v21imgp8zz3y6x?optimize=true',\n            center: [this.state.lng, this.state.lat],\n            zoom: this.state.zoom,\n            minPitch: 0,\n            maxPitch: 0,\n            pitchWithRotate: false,\n            logoPosition: 'bottom-right',\n        })\n\n        this.setState({ map: map })\n        this.setInteractive(false, map)\n\n        map.on('move', () => {\n            this.setState({\n                lng: map.getCenter().lng.toFixed(4),\n                lat: map.getCenter().lat.toFixed(4),\n                zoom: map.getZoom().toFixed(2)\n            });\n        });\n\n        map.once('idle', () => {\n            this.onSourceLoadFinished && !this.state.animate && this.onSourceLoadFinished()\n            if (this.state.loadState === 'loading') {\n                this.setState({\n                    loadState: 'loaded'\n                }, () => {\n                    this.updateVisibleCities()\n                })\n            }\n        })\n\n        map.on('moveend', () => {\n            this.setInteractive(false, map, () => { this.updateVisibleCities() })\n        })\n\n        /*\n        map.on('dragend', () => {\n            this.setInteractive(false, map, () => {  })\n            this.updateVisibleCities()\n        })\n        */\n\n        /*map.on('idle', () => {\n        })*/\n\n        map.on('zoomend', () => {\n            this.setInteractive(false, map, () => { this.updateVisibleCities() })\n        })\n\n        map.on('touchend', () => {\n            this.setInteractive(false, map, () => { this.updateVisibleCities() })\n        })\n\n        map.on('load', () => {\n\n            this.setState({\n                loadingText: 'Baixando dados das cidades e construindo mapa...'\n            })\n\n            map.addSource('covid', {\n                'type': 'geojson',\n                'data': `${this.baseUrl}/api/v1/br/cities.geojson`\n            })\n\n            map.addSource('covid-cities-daily', {\n                'type': 'geojson',\n                'data': `${this.baseUrl}/api/v1/br/cities-daily.geojson`\n            })\n\n            map.addLayer({\n                'id': 'covid-heatmap-death',\n                'type': 'heatmap',\n                'source': 'covid',\n                'visibility': 'none',\n                'paint': {\n                    // Increase the heatmap weight based on frequency and property magnitude\n                    'heatmap-weight': [\n                        'interpolate', ['linear'], ['number', ['get', 'newDeaths']], 0, 0, 20, 1\n                    ],\n                    // Increase the heatmap color weight weight by zoom level\n                    // heatmap-intensity is a multiplier on top of heatmap-weight\n                    'heatmap-intensity': [\n                        'interpolate', ['linear'], ['zoom'], 0, 1, 9, 3\n                    ],\n                    // Color ramp for heatmap.  Domain is 0 (low) to 1 (high).\n                    // Begin color ramp at 0-stop with a 0-transparancy color\n                    // to create a blur-like effect.\n                    'heatmap-color': [\n                        'interpolate', ['linear'], ['heatmap-density'],\n                        0, 'rgba(255,237,68,0)',\n                        0.1, '#E75151',\n                        0.2, '#D34848',\n                        0.3, '#BF3F3F',\n                        0.4, '#972D2D',\n                        0.5, '#9e001f',\n                        0.6, '#832424',\n                        0.7, '#6F1B1B',\n                        0.8, '#5B1212',\n                        0.9, '#470909',\n                        1, '#330000',\n                    ],\n                    // Adjust the heatmap radius by zoom level\n                    'heatmap-radius': [\n                        'interpolate', ['linear'], ['zoom'], 0, 2, 9, 20\n                    ],\n                    // Transition from heatmap to circle layer by zoom level\n                    'heatmap-opacity': ['interpolate', ['linear'], ['zoom'], 7, 1, 15, 0]\n                },\n                //filter: ['<=', ['number', ['get', 'timestamp']], this.state.date]\n            },\n                'waterway-label'\n            );\n\n            map.addLayer({\n                'id': 'covid-heatmap',\n                'type': 'heatmap',\n                'source': 'covid',\n                'paint': {\n                    // Increase the heatmap weight based on frequency and property magnitude\n                    'heatmap-weight': [\n                        'interpolate', ['linear'], ['number', ['get', 'newCases']], 0, 0, 20, 1\n                    ],\n                    // Increase the heatmap color weight weight by zoom level\n                    // heatmap-intensity is a multiplier on top of heatmap-weight\n                    'heatmap-intensity': [\n                        'interpolate', ['linear'], ['zoom'], 0, 1, 9, 3\n                    ],\n                    // Color ramp for heatmap.  Domain is 0 (low) to 1 (high).\n                    // Begin color ramp at 0-stop with a 0-transparancy color\n                    // to create a blur-like effect.\n                    'heatmap-color': [\n                        'interpolate', ['linear'], ['heatmap-density'],\n                        0, 'rgba(0,0,0,0)',\n                        0.1, '#007083',\n                        0.2, '#009a94',\n                        0.3, '#00c385',\n                        0.4, '#fdfd25',\n                        0.5, '#fdd525',\n                        0.6, '#fd9f25',\n                        0.7, '#fd6625',\n                        0.8, '#e6441c',\n                        0.9, '#E34519',\n                        1, '#c9240e'\n                    ],\n                    // Adjust the heatmap radius by zoom level\n                    'heatmap-radius': [\n                        'interpolate', ['linear'], ['zoom'], 0, 2, 9, 20\n                    ],\n                    // Transition from heatmap to circle layer by zoom level\n                    'heatmap-opacity': ['interpolate', ['linear'], ['zoom'], 7, 1, 15, 0]\n                },\n                //filter: ['<=', ['number', ['get', 'timestamp']], this.state.date]\n            },\n                'waterway-label'\n            );\n\n            map.addLayer({\n                'id': 'covid-point',\n                'type': 'circle',\n                'source': 'covid-cities-daily',\n                'minzoom': 8,\n                'paint': {\n                    // Size circle radius by earthquake magnitude and zoom level\n                    'circle-radius': [\n                        'interpolate', ['linear'], ['zoom'],\n                        7,\n                        ['interpolate', ['linear'], ['number', ['get', 'totalCases']], 1, 1, 6, 4],\n                        16,\n                        ['interpolate', ['linear'], ['number', ['get', 'totalCases']], 1, 5, 6, 50]\n                    ],\n                    // Color circle by earthquake magnitude\n                    'circle-color': [\n                        'interpolate', ['linear'], ['number', ['get', 'totalCases']],\n                        1, 'rgba(33,102,172,0)', 2, 'rgb(178,24,43)'\n                    ],\n                    'circle-stroke-color': 'white', 'circle-stroke-width': 1,\n                    'circle-opacity': ['interpolate', ['linear'], ['zoom'], 7, 0, 8, 1]\n                },\n                //filter: ['==', ['number', ['get', 'timestamp']], this.state.date],\n            },\n                'waterway-label'\n            );\n\n            map.addLayer({\n                'id': 'all-cities',\n                'type': 'circle',\n                'source': 'covid',\n                'minzoom': 2.8,\n                'paint': {\n                    'circle-color': 'rgba(0,0,0,0)',\n                    'circle-stroke-width': 0,\n                },\n            },\n            );\n\n        });\n\n\n    }\n}\n\n\n\nexport default MapBox;","import React from 'react'\n\nconst SimpleLink = ({ children, url, text, style, target='_blank'}) => {\n\n    if(children){\n        return (\n            <a href={url} style={style} target={target}>\n                {children}\n            </a>\n        )\n    }\n    if(text){\n        return (<a href={url} style={style} target={target}>{text}</a>)\n    }\n    return <a href={url} style={style} target={target}>{url}</a>\n}\nexport default SimpleLink","import React from 'react'\nimport SimpleLink from './Link'\n\nexport default function Footer() {\n    return (\n        <div className='footer'>\n\n            <strong style={{'fontSize': '1.2em'}}>Importante:</strong>\n\n            <p>\n            <strong>Este é apenas um experimento em visualização de dados.</strong>\n            </p>\n\n            <p>Não sou especialista em visualização de dados nem em disseminação de doenças, então\n            não confie nos dados deste site, é apenas uma tentativa de visualizar a disseminação\n            da doença e pode (certamente não) corresponder com a realdade.</p>\n            \n            <p>\n            Então lembre-se de considerar que qualquer dado pode parecer mais ou menos alarmante \n            dependendo da forma como é apresentado e que eu não tenho a competência necessária\n            para availiar isso de forma totalmente correta.\n            </p>\n\n            <p>\n            Sugestões ou correções podem ser enviadas pelo GitHub (link a seguir).\n            </p>\n\n            <hr/>\n\n            <p>\n                <strong>Meu perfil no GitHub:  </strong>\n\n                <SimpleLink url='https://github.com/ALREstevam' />\n            </p>\n            \n            <p>\n                <strong>Repositórios deste projeto no GitHub:  </strong>\n                <SimpleLink url='https://github.com/ALREstevam/covid19-br-vis-back'/>\n                <span> e </span>\n                <SimpleLink url='https://github.com/ALREstevam/covid19-br-vis-back'/>\n                <span>.</span>\n            </p>\n            \n        </div>\n    )\n}\n","import React from 'react'\nimport { ResponsiveLine } from '@nivo/line'\n\nfunction fixDecimalPlaces(num, decimalPlaces = 2) {\n    if (typeof num === 'string' || num instanceof String) return num\n    if (Number.isInteger(num)) return num.toString()\n    else return Number(num).toFixed(decimalPlaces).toString()\n}\n\nfunction decimalOrDivisor(number, decimalPlaces=2){\n    const num = Number(number)\n    if(num > 1000)return num.toLocaleString('pt-br')\n    else return fixDecimalPlaces(num, decimalPlaces)\n}\n\nfunction abbreviateNumber(num, fixed = 2) {\n    if (num === null) { return null; } // terminate early\n    if (num === 0) { return '0'; } // terminate early\n    fixed = (!fixed || fixed < 0) ? 0 : fixed; // number of decimal places to show\n    var b = (num).toPrecision(2).split(\"e\"), // get power\n        k = b.length === 1 ? 0 : Math.floor(Math.min(b[1].slice(1), 14) / 3), // floor at decimals, ceiling at trillions\n        c = k < 1 ? num.toFixed(0 + fixed) : (num / Math.pow(10, k * 3)).toFixed(1 + fixed), // divide by power\n        d = c < 0 ? c : Math.abs(c), // enforce -0 is 0\n        e = d + ['', 'K', 'M', 'B', 'T'][k]; // append power\n    return e;\n}\n\nfunction formatNumber(number, decimalPlaces=2){\n    const num = Number(number)\n    if(num > -20 && num < 20) return fixDecimalPlaces(num, decimalPlaces)\n    else  return abbreviateNumber(num, decimalPlaces)\n}\n\nfunction showEvery(n) {\n    let current = 0\n    return (value) => {\n        current += 1\n        if (current % n === 0) {\n            current = 0\n            return value\n        } else {\n            return ''\n        }\n    }\n}\n\nconst showSometimes = showEvery(7)\n\nconst theme = {\n    axis: {\n        textColor: \"#eee\",\n        fontSize: 10,\n        tickColor: \"#eee\"\n    },\n    grid: {\n        stroke: \"#888\",\n        strokeWidth: 1\n    },\n    pointLabel: {\n        textColor: \"#eee\",\n        fontSize: 20\n    },\n    dots: {\n        text: {\n            fontSize: 10,\n        },\n    },\n\n}\n\nconst scales = {\n    linear: (stacked) => {\n        return {\n            type: 'linear', min: 0, max: 'auto', stacked: stacked, reverse: false\n        }\n    },\n    linearZeroOne: (stacked) => {\n        return {\n            type: 'linear', min: 0, max: 1, stacked: stacked, reverse: false\n        }\n    },\n    linearMinusOnePlusOne: (stacked) => {\n        return {\n            type: 'linear', min: -1, max: 1, stacked: stacked, reverse: false\n        }\n    },\n    log10: (stacked) => {\n        return {\n            type: 'log', base: 10, max: 'auto', stacked: stacked, reverse: false\n        }\n    }\n}\n\nconst Tootip = ({node, data}) => {\n    let last = undefined\n    let lasty = 0\n\n    let index = Number.parseInt(node.point.id.split('.')[1])\n    \n    if (index > 0) {\n        last = data.filter(data => data.id === node.point.serieId)[0].data[index - 1]\n        lasty = last.y\n    }\n\n    let lastDiff = node.point.data.yFormatted - lasty\n    let lastDiffStr = fixDecimalPlaces(lastDiff)\n    lastDiffStr = lastDiff >= 0 ? `+${decimalOrDivisor(lastDiffStr)}` : `${decimalOrDivisor(lastDiffStr)}`\n\n    return (\n        <div style={{\n            color: node.point.serieColor,\n            backgroundColor: '#fff',\n            padding: '5px',\n            border: `1px solid ${node.point.borderColor}`,\n            textAlign: 'center',\n            borderRadius: '5px',\n            boxShadow: '5px 5px 10px -7px rgba(0,0,0,0.75)'\n        }}>\n            <strong style={{ fontSize: '.9em' }}>{node.point.data.xFormatted}</strong><br />\n            <span>{node.point.serieId}: <strong>{decimalOrDivisor(node.point.data.yFormatted)}</strong>\n                <br />\n                <span> ({lastDiffStr})</span>\n            </span>\n        </div>\n    )\n}\n\n\nconst LinePLot = ({ data, colors = { scheme: 'set3' }, stacked = false, yScaleType = 'linear' }) => {\n    return (<ResponsiveLine\n        data={data}\n        margin={{ top: 50, right: 120, bottom: 100, left: 90 }}\n        tooltip={(node)=>(<Tootip node={node} data={data}/>)}\n        xScale={{\n            type: 'time', //point, time, linear\n            //min: 0,\n            //max: 'auto',\n            format: \"%Y-%m-%dT%H:%M:%S\",\n            //precision: \"hour\",\n            //2020-02-25T00:00:00\n        }}\n\n        yScale={scales[yScaleType](stacked)}\n\n        xFormat=\"time:%d/%m\"\n        /*yFormat={}*/\n\n        theme={theme}\n        curve=\"natural\"\n        axisTop={null}\n        axisRight={null}\n        axisBottom={{\n            orient: 'bottom',\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            legend: 'Tempo',\n            legendOffset: 36,\n            legendPosition: 'middle',\n            format: '%d/%m',\n        }}\n        axisLeft={{\n            legend: 'Pessoas',\n            orient: 'left',\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            legendOffset: -40,\n            legendPosition: 'middle',\n            format: (n) => formatNumber(n, 2),\n        }}\n        colors={colors}\n        pointSize={3}\n        pointBorderWidth={3}\n        pointColor={{ theme: 'background' }}\n        pointBorderColor={{ from: 'serieColor' }}\n        \n        enablePointLabel={true}\n        pointLabel={e => showSometimes(formatNumber(e.y, 4))}\n        pointLabelYOffset={-12}\n        \n        useMesh={true}\n        legends={[\n            {\n                anchor: 'bottom-left',\n                direction: 'row',\n                justify: false,\n                translateX: 0,\n                translateY: 90,\n                itemsSpacing: 0,\n                itemDirection: 'left-to-right',\n                itemWidth: 80,\n                itemHeight: 20,\n                itemOpacity: 0.75,\n                symbolSize: 12,\n                symbolShape: 'circle',\n                symbolBorderColor: 'rgba(0, 0, 0, .5)',\n                effects: [\n                    {\n                        on: 'hover',\n                        style: {\n                            itemBackground: 'rgba(0, 0, 0, .03)',\n                            itemOpacity: 1\n                        }\n                    }\n                ]\n            }\n        ]}\n    />)\n}\n\n\nexport default LinePLot","import React from 'react'\nimport { ResponsiveBar } from '@nivo/bar'\n\nconst BarPlot = ({data, keys, index, xTitle, yTitle, \n    groupMode='grouped', layout='vertical', colors=['#F47560', '#61CDBB']}) => (\n    <ResponsiveBar\n        data={data}\n        keys={keys}\n        indexBy={index}\n        margin={{ top: 50, right: 130, bottom: 50, left: 110 }}\n        padding={0.3}\n        groupMode={groupMode}\n        layout={layout}\n        minValue={0}\n        colors={ colors }\n        \n        borderColor={{ from: 'color', modifiers: [ [ 'darker', 1.6 ] ] }}\n        axisTop={null}\n        axisRight={null}\n        axisBottom={{\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            legend: xTitle || 'x',\n            legendPosition: 'middle',\n            legendOffset: 32\n        }}\n        axisLeft={{\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            legend: yTitle || \"y\",\n            legendPosition: 'middle',\n            legendOffset: -90,\n        }}\n        labelSkipWidth={0}\n        labelSkipHeight={0}\n        labelTextColor={{ from: 'color', modifiers: [ [ 'darker', 1.6 ] ] }}\n        legends={[\n            {\n                dataFrom: 'keys',\n                anchor: 'bottom-right',\n                direction: 'column',\n                justify: false,\n                translateX: 120,\n                translateY: 0,\n                itemsSpacing: 2,\n                itemWidth: 100,\n                itemHeight: 20,\n                itemDirection: 'left-to-right',\n                itemOpacity: 0.85,\n                symbolSize: 20,\n                effects: [\n                    {\n                        on: 'hover',\n                        style: {\n                            itemOpacity: 1\n                        }\n                    }\n                ]\n            }\n        ]}\n        animate={true}\n        motionStiffness={90}\n        motionDamping={15}\n    />\n)\n\nexport default BarPlot","import React from 'react'\nimport BarPlot from './BarPlot'\n\nconst HorizontalBarPlot = ({ data, keys, index, xTitle, yTitle }) => (\n    <BarPlot\n        data={data}\n        keys={keys}\n        index={index}\n        xTitle={xTitle}\n        yTitle={yTitle}\n        groupMode='grouped'\n        layout='horizontal'\n        colors={['#F47560', '#61CDBB']}\n    />\n)\n\nexport default HorizontalBarPlot","export default class MapDataExtractor {\n    constructor() {\n        this.processedData = undefined\n        this.rawData = undefined\n        this.untilDate = undefined\n        this.filteredIndexes = undefined\n\n        this.casesPlotData = undefined\n        this.casesGrowthFactorPlotData = undefined\n        this.deathsPlotData = undefined\n        this.deathsGrowthRateData = undefined\n        this.deathsOverCasesData = undefined\n        this.newCasesData = undefined\n        this.newDeathsData = undefined\n        this.casesDeathsPerStateAndCityData = undefined\n    }\n\n    makeDataset(rawData, untilDate) {\n        this.rawData = rawData\n        this.untilDate = untilDate\n\n        this.filteredIndexes = Object.keys(rawData)\n            .filter(dt =>\n                (untilDate.setHours(0, 0, 0, 0) > (new Date(dt).setHours(0, 0, 0, 0)))\n            )\n            .sort((a, b) => (new Date(a)) - (new Date(b)))\n\n\n        this.processedData = this.filteredIndexes\n            .map(key => rawData[key]\n                .reduce(\n                    (sum, city) => {\n                        return {\n                            date: key,\n                            deaths: sum.deaths + city.deaths,\n                            newCases: sum.newCases + city.newCases,\n                            newDeaths: sum.newDeaths + city.newDeaths,\n                            totalCases: sum.totalCases + city.totalCases,\n                        }\n                    }, {\n                        date: undefined,\n                        deaths: 0,\n                        newCases: 0,\n                        newDeaths: 0,\n                        totalCases: 0,\n                    })\n            )\n        return this.processedData\n    }\n\n    yGrowthFactor(array) {\n        let growthFactor = []\n        let pair = [ /*yesterday, today*/ ]\n\n        for (let el of array) {\n            pair.push(el)\n            if (pair.length === 2) {\n                let y = (pair[0].y === 0) ? (0) : ((pair[1].y / pair[0].y) - 1)\n\n                growthFactor.push({\n                    x: el.x,\n                    y: y,\n                })\n                pair = [el] //today becomes yesterday\n            }\n        }\n        return growthFactor\n    }\n\n    generateNewCasesPlotData() {\n        return this.newCasesData = {\n            \"id\": \"# novos casos / dia\",\n            \"color\": \"#61cdbb\",\n            \"data\": this.processedData.map(day => {\n                return {\n                    x: day.date,\n                    y: day.newCases,\n                }\n            })\n        }\n    }\n\n    generateNewDeathsPlotData() {\n        return this.newDeathsData = {\n            \"id\": \"# novos óbitos / dia\",\n            \"color\": \"#61cdbb\",\n            \"data\": this.processedData.map(day => {\n                return {\n                    x: day.date,\n                    y: day.newDeaths,\n                }\n            })\n        }\n    }\n\n    generateCasesPlotData() {\n        return this.casesPlotData = {\n            \"id\": \"Casos\",\n            \"color\": \"#61cdbb\",\n            \"data\": this.processedData.map(day => {\n                return {\n                    x: day.date,\n                    y: day.totalCases,\n                }\n            })\n        }\n    }\n\n    generateDeathsPlotData() {\n        return this.deathsPlotData = {\n            \"id\": \"Óbitos\",\n            \"color\": \"#f47560\",\n            \"data\": this.processedData.map(day => {\n                return {\n                    x: day.date,\n                    y: day.deaths,\n                }\n            })\n        }\n    }\n\n    generateCasesGrowthFactorPlotData() {\n        const cases = this.casesPlotData && this.casesPlotData.data.length > 0 ? this.casesPlotData : this.generateCasesPlotData()\n        return this.casesGrowthFactorPlotData = {\n            id: 'GR casos',\n            color: '#f47560',\n            data: this.yGrowthFactor(cases.data)\n        }\n    }\n\n    generateDeathsGrowthFactorPlotData() {\n        const deaths = this.deathsPlotData && this.deathsPlotData.data.length > 0 ? this.deathsPlotData : this.generateDeathsPlotData()\n        return this.deathsGrowthRateData = {\n            id: 'GR óbitos',\n            color: '#f47560',\n            data: this.yGrowthFactor(deaths.data)\n        }\n    }\n\n    generateDeathsOverCases() {\n\n        const deaths = this.deathsPlotData && this.deathsPlotData.data.length > 0 ? this.deathsPlotData : this.generateDeathsPlotData()\n        const cases = this.casesPlotData && this.casesPlotData.data.length > 0 ? this.casesPlotData : this.generateCasesPlotData()\n\n        const deathsDates = deaths.data.map(el => el.x)\n        const casesDates = cases.data.map(el => el.x)\n\n        const dates = deathsDates.filter(e => casesDates.includes(e))\n\n        const deathsData = deaths.data.filter(el => el.y > 0 && dates.includes(el.x))\n        const casesData = cases.data.filter(el => el.y > 0 && dates.includes(el.x))\n\n        let deathsOverCases = []\n\n        for (let i = 0; i < deathsData.length; i++) {\n            let casesDay = deathsData[i]\n            let deathsDay = casesData[i]\n\n            if (casesDay.y > 0 && deathsDay.y > 0) {\n                deathsOverCases.push({\n                    x: casesDay.x,\n                    y: deathsDay.y / casesDay.y,\n                })\n            }\n        }\n\n        return this.deathsOverCasesData = {\n            id: 'casos/óbitos',\n            color: '#f47560',\n            data: deathsOverCases\n        }\n    }\n\n    /*\n    generateChartData() {\n        return {\n            deaths: this.deathsPlotData && this.deathsPlotData.data.length > 0 ?\n                this.deathsPlotData : this.generateDeathsPlotData(),\n            cases: this.casesPlotData && this.casesPlotData.data.length > 0 ?\n                this.casesPlotData : this.generateCasesPlotData(),\n            casesGrowthFactor: this.casesGrowthFactorPlotData && this.casesGrowthFactorPlotData.data.length > 0 ?\n                this.casesGrowthFactorPlotData : this.generateCasesGrowthFactorPlotData(),\n            deathGrowthFactor: this.deathsGrowthRateData && this.deathsGrowthRateData.data.length > 0 ?\n                this.deathsGrowthRateData : this.generateDeathsGrowthFactorPlotData(),\n            deathsOverCases: this.deathsOverCasesData && this.deathsOverCasesData.data.length > 0 ?\n                this.deathsOverCasesData : this.generateDeathsOverCases(),\n            newCases: this.newCasesData && this.newCasesData.data.length > 0 ?\n                this.newCasesData : this.generateNewCasesPlotData(),\n            newDeaths: this.newDeathsData && this.newDeathsData.data.length > 0 ?\n                this.newDeathsData : this.generateNewDeathsPlotData(),\n            casesDeathsPerLocation: this.generateCasesDeathsPerStateAndCity(),\n        }\n    }\n    */\n\n    generateCasesDeathsPerStateAndCity(maxItems = 5) {\n\n        let perState = {}\n        let perCity = {}\n\n        const perDayData = this.filteredIndexes.map(key => this.rawData[key])\n\n\n        if (!perDayData || perDayData.length === 0) {\n            return {\n                states: {\n                    data: [],\n                    keys: [],\n                    index: 'state',\n                },\n                cities: {\n                    data: [],\n                    keys: [],\n                    index: 'city',\n                },\n            }\n        }\n\n        const lastDay = perDayData[perDayData.length - 1]\n\n        for (let report of lastDay) {\n            // state\n            if (perState.hasOwnProperty(report.state)) {\n                perState[report.state] = {\n                    state: report.state,\n                    \"óbitos\": report.deaths + perState[report.state][\"óbitos\"],\n                    casos: report.totalCases + perState[report.state]['casos'],\n                }\n            } else {\n                perState[report.state] = {\n                    state: report.state,\n                    \"óbitos\": report.deaths,\n                    casos: report.totalCases,\n                }\n            }\n            // city\n            if (perCity.hasOwnProperty(report.city)) {\n                perCity[report.city] = {\n                    city: report.city,\n                    \"óbitos\": report.deaths + perCity[report.city][\"óbitos\"],\n                    casos: report.totalCases + perCity[report.city]['casos'],\n                }\n            } else {\n                perCity[report.city] = {\n                    city: report.city,\n                    \"óbitos\": report.deaths,\n                    casos: report.totalCases,\n                    }\n            }\n        }\n\n        const sortedPerState = Object.keys(perState)\n            .map(key => perState[key])\n            .sort( (a, b) =>  b['casos'] - a['casos'] )\n\n        const sortedPerCity = Object.keys(perCity)\n            .map(key => perCity[key])\n            .sort( (a, b) =>  b['casos'] - a['casos'] )\n\n        let filteredPerState = sortedPerState\n        let filteredPerCity = sortedPerCity\n\n        if(sortedPerState.length > maxItems){\n            filteredPerState = sortedPerState.slice(0, maxItems)\n        }\n\n        if(sortedPerCity.length > maxItems){\n            filteredPerCity = sortedPerCity.slice(0, maxItems)\n        }\n    \n        return {\n            states: {\n                data: filteredPerState,\n                keys: [ 'óbitos', 'casos' ],\n                index: 'state',\n            },\n            cities: {\n                data: filteredPerCity,\n                keys: [ 'óbitos', 'casos' ],\n                index: 'city',\n            },\n        }\n    }\n\n    removeZeroes(plotData) {\n        return {\n            ...plotData,\n            ...{\n                data: plotData.data.filter(el => el.y > 0)\n            }\n        }\n    }\n\n    makeTitle() {\n        const visibleCitiesPerDate = this.rawData\n\n        if (Object.keys(visibleCitiesPerDate).length === 0) return 'COVID-19 em ...'\n\n        let data = visibleCitiesPerDate[Object.keys(visibleCitiesPerDate)[0]]\n\n\n        let states = Array.from(new Set(data.map(city => city.state)))\n\n        if ( /*data.length > 350 || */ states.length >= 25) return 'COVID-19 em todo o Brasil'\n        if (data.length > 40) {\n            let showStates = states.slice(0, 3)\n            if (states.length - 3 > 1) return 'COVID-19 em parte de ' + showStates.join(', ') + ' e outros ' + (states.length - 3) + ' estados'\n            if (states.length - 3 === 1) return 'COVID-19 em parte de ' + showStates.join(', ') + ' e outro estado'\n            else {\n                if (showStates.length === 3) return 'COVID-19 em ' + showStates.join(', ')\n                if (showStates.length === 2) return 'COVID-19 em ' + showStates.join(' e ')\n                else return 'COVID-19 em ' + showStates[0]\n            }\n        } else {\n            let cities = data.map(city => city.city).filter(city => city !== 'CASO SEM LOCALIZAÇÃO DEFINIDA')\n            let showCities = cities.slice(0, 3)\n\n            if (cities.length - 3 > 1) return 'COVID-19 em ' + showCities.join(', ') + ' e outras ' + (cities.length - 3) + ' cidades'\n            if (cities.length - 3 === 1) return 'COVID-19 em ' + showCities.join(', ') + ' e outra cidade'\n            else {\n                if (showCities.length === 3) return 'COVID-19 em ' + showCities.join(', ')\n                if (showCities.length === 2) return 'COVID-19 em ' + showCities.join(' e ')\n                else return 'COVID-19 em ' + showCities[0]\n            }\n        }\n    }\n}","import React from 'react';\n\nexport const GrowthRateFormula = () => {\n    return (<math xmlns=\"http://www.w3.org/1998/Math/MathML\">\n        <mstyle displaystyle=\"true\">\n            <mrow className=\"MJX-TeXAtom-ORD\">\n                <mi>g</mi>\n                <mi>r</mi>\n                <mo>=</mo>\n                <mfrac>\n                    <mrow>\n                        <mi>v</mi>\n                        <mi>a</mi>\n                        <mi>l</mi>\n                        <mi>o</mi>\n                        <msub>\n                            <mi>r</mi>\n                            <mrow className=\"MJX-TeXAtom-ORD\">\n                                <mi>d</mi>\n                                <mi>i</mi>\n                                <mi>a</mi>\n                            </mrow>\n                        </msub>\n                    </mrow>\n                    <mrow>\n                        <mi>v</mi>\n                        <mi>a</mi>\n                        <mi>l</mi>\n                        <mi>o</mi>\n                        <msub>\n                            <mi>r</mi>\n                            <mrow className=\"MJX-TeXAtom-ORD\">\n                                <mi>d</mi>\n                                <mi>i</mi>\n                                <mi>a</mi>\n                                <mo>&#x2212;</mo>\n                                <mn>1</mn>\n                            </mrow>\n                        </msub>\n                    </mrow>\n                </mfrac>\n                <mo>&#x2212;</mo>\n                <mn>1</mn>\n            </mrow>\n        </mstyle>\n    </math>)\n}\n\n\n\nexport const GrowthRate = () => (\n    <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\n        <mstyle displaystyle=\"true\">\n            <mrow className=\"MJX-TeXAtom-ORD\">\n                <mi>g</mi>\n                <mi>r</mi>\n            </mrow>\n        </mstyle>\n    </math>\n)\n\nexport const GrGratherThenZero = () => (\n    <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\n        <mstyle displaystyle=\"true\">\n            <mrow className=\"MJX-TeXAtom-ORD\">\n                <mi>g</mi>\n                <mi>r</mi>\n                <mo>&gt;</mo>\n                <mn>0</mn>\n            </mrow>\n        </mstyle>\n    </math>\n)\n\nexport const GrLowerThenZero = () => (\n    <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\n        <mstyle displaystyle=\"true\">\n            <mrow className=\"MJX-TeXAtom-ORD\">\n                <mi>g</mi>\n                <mi>r</mi>\n                <mo>&lt;</mo>\n                <mn>0</mn>\n            </mrow>\n        </mstyle>\n    </math>\n)\n\nexport const GrApproxZero = () => (\n    <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\n        <mstyle displaystyle=\"true\">\n            <mrow className=\"MJX-TeXAtom-ORD\">\n                <mi>g</mi>\n                <mi>r</mi>\n                <mo>&#x2248;{/*≈*/}</mo>\n                <mn>0</mn>\n            </mrow>\n        </mstyle>\n    </math>\n)","import React from 'react';\n\nimport { GrowthRateFormula, GrowthRate, GrGratherThenZero, GrLowerThenZero, GrApproxZero } from './mathFormulas'\n\nexport default {\n    aboutSite: {\n        presentation: (\n            <p>\n                Este site contém um conjunto de experimentos de visualização de dados sobre o COVID-19 nos municípios brasileiros.\n                os dados foram extraídos de <a href='https://covid19br.wcota.me/'>https://covid19br.wcota.me/</a> e então processados no formato GEOJSON, adequado\n                para a construção de mapas interativos. Mais informações no rodapé.\n            </p>\n        ),\n        youCanDo: (\n            <p>\n                Navegue pelo mapa e use o zoom para selecionar uma região específica. Os gráficos abaixo se adequarão para mostrar\n                os dados das regioẽs visíveis no mapa.\n            </p>\n        )\n    },\n    growthFactor: {\n        mainExplanation: [\n            (<p key='gr1'>\n                O <strong>Fator de Crescimento</strong> (ou <em>Growth Factor</em>) reflete o crescimento percentual diário no número de casos e óbitos computados:\n            </p>),\n            (<p key='gr2'>\n                Este valor é calculado com a seguinte fórmula: <GrowthRateFormula />\n            </p>),\n            (<p  key='gr3'>\n                De forma especifica, o valor do <GrowthRate /> indica que o número de novos casos ou óbitos em um determinado dia pode ser obtido pela multiplicação da devida quantidade no dia anterior por <GrowthRate />.\n            </p>),\n        ],\n\n        parameters: (\n            <ul>\n                <li><GrGratherThenZero />: quantidade casos ou óbitos aumentando, quanto maior o valor, maior o crescimento diário.</li>\n                <li><GrLowerThenZero />: quantidade casos ou óbitos diminuindo, quanto menor o valor, maior é a diminuição na quantidade em comparação com o dia anterior.</li>\n                <li><GrApproxZero />: a quantidade de casos ou óbitos está estável, houve redução ou pequeno aumento entre os dias.</li>\n            </ul>\n        ),\n\n        about: [\n            (<p key='aboutgr1'>\n                O fator de crescimento é uma importante métrica na avaliação da disseminação da doença e ocorrência de mortes, mas\n                é totalmente dependente da testagem em massa da população e da confirmação da causa dos óbitos onde há suspeita de COVID-19,\n                assim, um aumento ou diminuição neste fator pode revelar tanto mudanças na quantidade real quanto no número de testes.\n            </p>),\n            (<p key='aboutgr2'>\n                É importante notar também que: nas primeiras semanas da infecção a quantidade de pacientes é muito pequena para termos valores concisos, assim, há uma grande flutuação num primeiro momento e com o tempo temos uma medida mais realista.\n            </p>),\n            (<p key='aboutgr3'>\n                De forma geral, espera-se que este valor mantenha-se acima de zero enquanto a doença estiver se alastrando, que se mantenha muito próxima ao zero quando o platô da infecção for atingido e que fique abaixo de zero durante sua redução.\n            </p>)\n        ],\n    },\n    specialChars: {\n        pointUp: '˄',\n        pointDown: '˅',\n    },\n    dataSource: {\n        mainText: (\n            <p>\n                Fonte de dados para o mapa e os gráficos: <a href='https://covid19br.wcota.me/'>Número de casos confirmados de COVID-19 no Brasil</a>\n            </p>\n        )\n    },\n    perLocation:{\n        explainMax: (amountCities, amountStates)=>(<p>Estes gráficos contém as {amountCities} cidades e os {amountStates} estados visíveis no mapa com a maior quantidade de casos confirmados de COVID-19.</p>)\n    },\n}\n\n","import React, { Component } from 'react';\nimport { Tabs, TabItem, TabsContent, TabPanel } from 'react-foundation'\n\n\nexport default class ChartTabs extends Component {\n    constructor() {\n        super();\n        this.state = {\n            activeIndex: 0\n        }\n    }\n\n    formatTitleToUrl(text){\n        return text.toLowerCase().split(' ').join('-')\n    }\n\n    openTab = (index) => {\n        if(index !== this.state.activeIndex){\n            this.setState({ activeIndex: index })\n            this.props.onSelectedChanged && \n                this.props.onSelectedChanged(index, this.props.tabTitles[index])\n        }\n    }\n\n    componentDidMount(){\n        this.openTab(this.props.selectedIndex)\n    }\n\n    render() {\n        return (\n            <div>\n                <link rel='stylesheet' type='text/css'\n                    href='https://cdnjs.cloudflare.com/ajax/libs/foundation/6.5.1/css/foundation-float.min.css' />\n                <Tabs>\n                    {this.props.tabTitles.map((title, index) => (\n                        <TabItem isActive={this.state.activeIndex === index}\n                            key={`tabitem-key-${title}-${index}`}\n                            className='tabTitle'\n                            onClick={(e) => this.openTab(index)}>\n                            <a href={`#tab-${this.formatTitleToUrl(title)}`}>{title}</a>\n                        </TabItem>)\n                    )}\n                </Tabs>\n                <TabsContent>\n\n                    {this.props.children.map((Element, index) => (\n                        <TabPanel \n                            key={`tabpanel-key-${this.props.tabTitles[index]}-${index}`}\n                            id={`tab-${this.formatTitleToUrl(this.props.tabTitles[index])}`} \n                            isActive={this.state.activeIndex === index}\n                            style={{ width: '100%', minHeight: '100vh' }}>\n                            {(!this.props.renderIfSelectedOnly || (\n                                this.props.renderIfSelectedOnly === true \n                                && this.state.index  === index\n                            )) &&\n                                Element}\n                        </TabPanel>\n                    ))}\n\n                </TabsContent>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\n//import { getCitiesBrJson } from '../requests/covid'\nimport MapBox from './MapBox'\n//import MyResponsiveLine from './LogPlot'\nimport LoadingBar from 'react-top-loading-bar';\nimport Footer from './Footer'\nimport LinePlot from './LinePlot'\nimport HorizontalBarPlot from './HorizontalBarPlot'\nimport MapDataExtractor from '../common/MapDataExtractor'\nimport texts from '../texts/texts'\nimport ChartTabs from './Tabs'\n\n//import WebWorker from '../worker/WebWorkerSetup'\n//import visibleCitiesWorker from '../worker/visibleCitiesWorker'\n\n\nconst currentScrollPosition = () => {\n    return (window.pageYOffset || document.documentElement.scrollTop)\n}\n\nconst scrollTo = (pos) => {\n    document.documentElement.scrollTop = document.body.scrollTop = pos\n}\n\nconst scrollOffset = (offset) => {\n    scrollTo(currentScrollPosition() + offset)\n}\n\n\nconst ScrollButtons = () => (\n    <div className='scrollButtons'>\n        <div className='scrollButton' onClick={() => { scrollOffset(-500) }}><span>{texts.specialChars.pointUp}</span></div>\n        <div className='scrollButton' onClick={() => { scrollOffset(500) }}><span>{texts.specialChars.pointDown}</span></div>\n    </div>\n)\n\nconst LinePlotWrapper = ({ title, data, colors,\n    stacked = true, className = 'almostFullPage', yScaleType = 'linear' }) => {\n\n    if (data === undefined) {\n        console.error('LinePlotWrapper received undefined as data to plot', title)\n        return (undefined)\n    }\n\n    return (\n        <div>\n            <h3>{title}</h3>\n            <div className={className}>\n                <LinePlot data={data}\n                    colors={colors}\n                    stacked={stacked}\n                    yScaleType={yScaleType} />\n            </div>\n        </div>\n    )\n}\n\nconst HorizontalBarPlotWrapper = ({ title, data, keys, index, xTitle, yTitle, className='onePageAndaHalfSize'}) => {\n    return (\n        <div>\n            <h3>{title}</h3>\n            <div className={className}>\n                <HorizontalBarPlot \n                data={data}\n                keys={keys} index={index}\n                xTitle={xTitle}\n                yTitle={yTitle}/>\n            </div>\n        </div>\n\n    )\n}\nclass MainPage extends Component {\n    constructor(props) {\n        super(props)\n\n        this.timers = []\n        this.plotData = new MapDataExtractor()\n        this.plotData.makeDataset({}, new Date())\n\n        this.tabs = {\n            '(🛈) Sobre': {\n                onOpened: () => { }\n            },\n            '(Σ) Acumulado': {\n                onOpened: () => {\n                    this.updateDatasetIfNeeded()\n                    this.setState({\n                        deaths: this.plotData.generateDeathsPlotData(),\n                        cases: this.plotData.generateCasesPlotData(),\n                    })\n                }\n            },\n            '(📅) Diário': {\n                onOpened: () => {\n                    this.updateDatasetIfNeeded()\n                    this.setState({\n                        newCases: this.plotData.generateNewCasesPlotData(),\n                        newDeaths: this.plotData.generateNewDeathsPlotData(),\n                    })\n                }\n            },\n            '(📈) Taxa de crescimento': {\n                onOpened: () => {\n                    this.updateDatasetIfNeeded()\n                    this.setState({\n                        deaths: this.plotData.generateDeathsPlotData(),\n                        cases: this.plotData.generateCasesPlotData(),\n                        casesGrowthFactor: this.plotData.generateCasesGrowthFactorPlotData(),\n                        deathGrowthFactor: this.plotData.generateDeathsGrowthFactorPlotData(),\n                        deathsOverCases: this.plotData.generateDeathsOverCases(),\n                    })\n                }\n            },\n            '(📊) Totais por cidade e estado': {\n                onOpened: () => {\n                    this.updateDatasetIfNeeded()\n                    this.setState({\n                        deaths: this.plotData.generateDeathsPlotData(),\n                        cases: this.plotData.generateCasesPlotData(),\n                        casesDeathsPerLocation: this.plotData.generateCasesDeathsPerStateAndCity(15),\n                    }, ()=>{\n                        console.log(this.state.casesDeathsPerLocation)\n                    })\n                }\n            },\n        }\n\n        this.tabTitles = Object.keys(this.tabs)\n\n        this.state = {\n            covidCasesGeoJson: undefined,\n            covidCasesJson: undefined,\n            loadingBarProgress: 0,\n            //visibleCities: [],\n            visibleCitiesPerDate: {},\n            selectedDate: new Date(),\n            perDateChartName: 'COVID-19 em todo o Brasil...',\n            scheduleUpdate: true,\n            currentTab: this.tabTitles[0],\n\n            deaths: this.plotData.generateDeathsPlotData(),\n            cases: this.plotData.generateCasesPlotData(),\n            casesGrowthFactor: this.plotData.generateCasesGrowthFactorPlotData(),\n            deathGrowthFactor: this.plotData.generateDeathsGrowthFactorPlotData(),\n            deathsOverCases: this.plotData.generateDeathsOverCases(),\n            newCases: this.plotData.generateNewCasesPlotData(),\n            newDeaths: this.plotData.generateNewDeathsPlotData(),\n            casesDeathsPerLocation: this.plotData.generateCasesDeathsPerStateAndCity(),\n        }\n    }\n\n    clearIntervals() {\n        for (let timer of this.timers) {\n            clearInterval(timer)\n        }\n    }\n\n    add(value) {\n        this.setState({\n            loadingBarProgress: this.state.loadingBarProgress + value\n        })\n    }\n\n    complete = () => {\n        this.setState({ loadingBarProgress: 100 })\n        this.clearIntervals()\n    }\n\n    onMapLoadedHandler = () => {\n        this.complete()\n        //this.worker.postMessage('SOMETHING');\n    }\n\n    onLoaderFinished = () => {\n        this.setState({ loadingBarProgress: 0 })\n    }\n\n\n    infiniteLoad = () => {\n        this.setState({\n            loadingBarProgress: this.state.loadingBarProgress + Math.round(5 + Math.random() * 5)\n        })\n\n        this.timers.push(setInterval(\n            () => {\n                this.setState({\n                    loadingBarProgress: this.state.loadingBarProgress + Math.round(Math.random() * 5)\n                })\n            }, 1200)\n        )\n    }\n\n    updateDatasetIfNeeded = () => {\n        if (this.state.scheduleUpdate) {\n            this.plotData.makeDataset(this.state.visibleCitiesPerDate, this.state.selectedDate)\n            this.setState({ scheduleUpdate: false })\n        }\n    }\n\n    handlePlotDataChanged = (visibleCities, visibleCitiesPerDate) => {\n        this.setState({\n            //visibleCities: visibleCities,\n            visibleCitiesPerDate: visibleCitiesPerDate,\n            perDateChartName: this.plotData.makeTitle(),\n            scheduleUpdate: true,\n        }, ()=>{\n            this.tabs[this.state.currentTab].onOpened()\n        })\n    }\n\n    handlePlotDateChanged = (date) => {\n        this.setState({\n            selectedDate: date,\n            perDateChartName: this.plotData.makeTitle(),\n            scheduleUpdate: true,\n        }, ()=>{\n            this.tabs[this.state.currentTab].onOpened()\n        })\n    }\n\n    onMapUpdatingHandler = (isLoading) => {\n        this.setState({ loading: isLoading })\n    }\n\n    onTabChangedHandler = (index, title) => {\n        this.tabs[title].onOpened()\n        this.setState({currentTab: title})\n    }\n\n    render() {\n        return (\n            <div>\n                <LoadingBar\n                    progress={this.state.loadingBarProgress}\n                    height={3}\n                    color='red'\n                    onLoaderFinished={this.onLoaderFinished}\n                />\n                <ScrollButtons />\n\n                <MapBox style={{ right: 0, left: 0, height: '95vh', width: '100%', maxHeight: '1000px' }}\n                    data={this.state.covidCasesGeoJson}\n                    zoom={3} lat={-13.5958} lng={-54.4587}\n                    onSourceLoadBegin={this.infiniteLoad}\n                    onSourceLoadFinished={this.onMapLoadedHandler}\n                    onVisibleCitiesChange={this.handlePlotDataChanged}\n                    onSelectedDateChanged={this.handlePlotDateChanged}\n                />\n\n                <ChartTabs\n                    tabTitles={this.tabTitles}\n                    selectedIndex={0}\n                    onSelectedChanged={this.onTabChangedHandler}\n                    renderIfSelectedOnly={false}\n                >\n\n                    <div>\n                        <h1>{this.state.perDateChartName}</h1>\n                        {texts.aboutSite.presentation}\n                        {texts.aboutSite.youCanDo}\n                    </div>\n\n                    <div>\n                        <h1>{this.state.perDateChartName}</h1>\n                        <LinePlotWrapper title='Casos e óbitos'\n                            data={[this.state.deaths, this.state.cases]}\n                            colors={['#fa4343', '#0068d2']}\n                            stacked={true} />\n\n                        <LinePlotWrapper title='Óbitos' data={[this.state.deaths]}\n                            colors={['#fa4343']}\n                        />\n\n                        <LinePlotWrapper title='Casos e óbitos em escala logarítmica'\n                            data={[this.plotData.removeZeroes(this.state.deaths),\n                            this.plotData.removeZeroes(this.state.cases)]}\n                            colors={['#fa4343', '#0068d2']}\n                            stacked={true}\n                            yScaleType='log10' />\n                    </div>\n\n                    <div>\n                        <h1>{this.state.perDateChartName}</h1>\n\n                        <h2>Novos casos e óbitos</h2>\n\n                        <LinePlotWrapper\n                            title='Novos casos por dia'\n                            data={[this.state.newCases]}\n                            colors={['#3841e8']}\n                        />\n\n                        <LinePlotWrapper\n                            title='Novos óbitos por dia'\n                            data={[this.state.newDeaths]}\n                            colors={['#e85e38']}\n                        />\n\n                        <h2>Novos casos e óbitos - escala logarítmica</h2>\n\n                        <LinePlotWrapper title='Casos e óbitos em escala logarítmica'\n                            data={[\n                                this.plotData.removeZeroes(this.state.newDeaths),\n                                this.plotData.removeZeroes(this.state.newCases)]}\n                            colors={['#fa4343', '#0068d2']}\n                            stacked={true}\n                            yScaleType='log10' />\n\n                    </div>\n\n                    <div>\n                        <h1>{this.state.perDateChartName}</h1>\n                        <LinePlotWrapper\n                            title='Casos sobre óbitos'\n                            data={[this.state.deathsOverCases]}\n                            colors={['#e8a838']}\n                        />\n\n                        <h2>Fator de crescimento</h2>\n\n                        {texts.growthFactor.mainExplanation}\n                        {texts.growthFactor.parameters}\n                        {texts.growthFactor.about}\n\n                        <LinePlotWrapper title='Fator de crescimento - casos'\n                            data={[this.state.casesGrowthFactor]}\n                            colors={['#00d3eb']}\n                        />\n\n                        <LinePlotWrapper title='Fator de crescimento - óbitos' data={\n                            [this.state.deathGrowthFactor]}\n                            colors={['#ff6a7f']}\n                        />\n\n                        <LinePlotWrapper title='Fator de crescimento - casos e óbitos' data={\n                            [this.state.casesGrowthFactor, this.state.deathGrowthFactor]}\n                            colors={['#ff6a7f', '#00d3eb']}\n                            yScaleType='linearMinusOnePlusOne'\n                        />\n                    </div>\n\n                    <div>\n                        <h1>{this.state.perDateChartName}</h1>\n                        \n                        {texts.perLocation.explainMax(15, 15)}\n\n                        <HorizontalBarPlotWrapper \n                            title='Totais por estado' \n                            data={this.state.casesDeathsPerLocation.states.data}\n                            keys={this.state.casesDeathsPerLocation.states.keys}\n                            index={this.state.casesDeathsPerLocation.states.index}\n                            xTitle=\"Pessoas\"\n                            yTitle=\"Estado\"\n                        />\n                        <HorizontalBarPlotWrapper \n                            title='Totais por cidade' \n                            data={this.state.casesDeathsPerLocation.cities.data}\n                            keys={this.state.casesDeathsPerLocation.cities.keys}\n                            index={this.state.casesDeathsPerLocation.cities.index}\n                            xTitle=\"Pessoas\"\n                            yTitle=\"Cidade\"\n                        />\n                    </div>\n\n                </ChartTabs>\n\n                <div style={{ marginLeft: 50, marginRight: 50 }}>\n                    <hr />\n                    {texts.dataSource.mainText}\n                </div>\n                <Footer />\n            </div>\n        );\n    }\n\n    componentDidMount() {\n        //this.worker = new WebWorker(visibleCitiesWorker)\n\n        /*this.worker.addEventListener('message', function(e) {\n            console.log('Message from Worker: ' + e.data)\n        })*/\n\n        this.updateDatasetIfNeeded()\n\n    }\n\n    componentWillUnmount() {\n        this.clearIntervals()\n    }\n}\n\nexport default MainPage;\n","import React from 'react';\nimport './App.css';\nimport MainPage from './components/MainPage'\nimport {NotificationContainer} from 'react-notifications';\nimport 'react-notifications/lib/notifications.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NotificationContainer>\n      </NotificationContainer>\n        <MainPage />\n    </div>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}