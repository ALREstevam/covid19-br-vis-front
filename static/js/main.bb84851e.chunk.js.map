{"version":3,"sources":["common/date.js","components/CityDataItem.js","env/envVars.js","components/Spinner.js","components/LoadingOpacity.js","components/MapBox.js","components/Link.js","components/Footer.js","components/LinePlot.js","common/MapDataExtractor.js","texts/mathFormulas.js","texts/texts.js","components/MainPage.js","App.js","serviceWorker.js","index.js"],"names":["daysBetween","d0","d1","Math","round","abs","formatDate","date","month","getMonth","day","getDate","year","getFullYear","length","join","addDays","days","dt","Date","valueOf","setDate","styles","lastUpdate","color","fontSize","cityName","dataValue","CityDataItem","name","state","cases","deaths","className","style","require","env","MAPBOX_ACCESS_TOKEN","process","BACKEND_URL","MAPBOX_ACCESS_TOKEN_LIST","str","sep","split","read_list","Spinner","LoadingOpacity","loading","text","mapboxgl","accessToken","MapBox","props","renderCityListItem","index","key","data","listableCities","city","totalCases","onSliderChangeEndedAsync","value","a","initialDate","parseInt","map","setFilter","getTime","updateVisibleCities","onSelectedDateChanged","handleAnimateChange","event","setState","animate","target","checked","animatedStep","setInteractive","isInteractive","mapObj","onSetFinished","undefined","properties","enable","forEach","prop","disable","isMapInteractive","baseUrl","onSourceLoadBegin","onSourceLoadFinished","lng","lat","zoom","sliderValue","maxDays","mapType","loadState","loadingText","featuresLength","this","queryRenderedFeatures","layers","features","cityData","perDate","sort","b","feature","hasOwnProperty","timestamp","push","Object","keys","force","setTimeout","listable","getHeatmapFeatures","processed","processVisibleCities","reverse","onVisibleCitiesChange","NotificationManager","info","changeSlider","animateTimeout","setInterval","clearInterval","setLayoutProperty","containerStyle","daysAgo","type","min","max","step","onChange","e","onMouseUp","handleMapTypeChange","itemRenderer","pageSize","textAlign","fontStyle","bottom","position","ref","el","mapContainer","Map","container","center","minPitch","maxPitch","pitchWithRotate","logoPosition","on","getCenter","toFixed","getZoom","once","addSource","addLayer","Component","SimpleLink","children","url","href","Footer","fixDecimalPlaces","num","decimalPlaces","String","Number","isInteger","toString","decimalOrDivisor","number","toLocaleString","abbreviateNumber","fixed","toPrecision","k","floor","slice","c","pow","d","formatNumber","showSometimes","n","current","showEvery","theme","axis","textColor","tickColor","grid","stroke","strokeWidth","pointLabel","dots","scales","linear","stacked","linearZeroOne","linearMinusOnePlusOne","log10","base","Tootip","node","lasty","point","id","filter","serieId","y","lastDiff","yFormatted","lastDiffStr","serieColor","backgroundColor","padding","border","borderColor","borderRadius","boxShadow","xFormatted","LinePLot","colors","scheme","yScaleType","margin","top","right","left","tooltip","xScale","format","yScale","xFormat","curve","axisTop","axisRight","axisBottom","orient","tickSize","tickPadding","tickRotation","legend","legendOffset","legendPosition","axisLeft","pointSize","pointBorderWidth","pointColor","pointBorderColor","from","enablePointLabel","pointLabelYOffset","useMesh","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","itemBackground","MapDataExtractor","processedData","rawData","untilDate","filteredIndexes","casesPlotData","casesGrowthFactorPlotData","deathsPlotData","deathsGrowthRateData","deathsOverCasesData","newCasesData","newDeathsData","casesDeathsPerStateAndCityData","setHours","reduce","sum","newCases","newDeaths","array","growthFactor","pair","x","generateCasesPlotData","yGrowthFactor","generateDeathsPlotData","deathsDates","casesDates","dates","includes","deathsData","casesData","deathsOverCases","i","casesDay","deathsDay","casesGrowthFactor","generateCasesGrowthFactorPlotData","deathGrowthFactor","generateDeathsGrowthFactorPlotData","generateDeathsOverCases","generateNewCasesPlotData","generateNewDeathsPlotData","casesDeathsPerLocation","generateCasesDeathsPerStateAndCity","perState","perCity","perDayData","lastDay","report","plotData","visibleCitiesPerDate","states","Array","Set","showStates","cities","showCities","GrowthRateFormula","xmlns","displaystyle","GrowthRate","GrGratherThenZero","GrLowerThenZero","GrApproxZero","aboutSite","presentation","youCanDo","mainExplanation","parameters","about","specialChars","pointUp","pointDown","dataSource","mainText","scrollOffset","offset","pos","window","pageYOffset","document","documentElement","scrollTop","body","ScrollButtons","onClick","texts","LinePlotWrapper","title","LinePlot","console","error","MainPage","complete","loadingBarProgress","clearIntervals","onMapLoadedHandler","onLoaderFinished","infiniteLoad","random","timers","updatePlots","visibleCities","makeDataset","selectedDate","perDayChartData","generateChartData","perDateChartName","makeTitle","selectedDateChangedHandler","onMapUpdatingHandler","isLoading","covidCasesGeoJson","covidCasesJson","timer","progress","height","width","maxHeight","removeZeroes","marginLeft","marginRight","App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","getElementById","URL","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.bb84851e.chunk.js","sourcesContent":["export const ONE_DAY = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds\n\nexport function daysBetween(d0, d1) {\n    return Math.round(Math.abs((d0 - d1) / ONE_DAY));\n}\n\nexport function formatDate(date) {\n    let month = '' + (date.getMonth() + 1)\n    let day = '' + date.getDate()\n    let year = date.getFullYear()\n\n    if (month.length < 2) {\n        month = '0' + month;\n    }\n    if (day.length < 2) {\n        day = '0' + day;\n    }\n\n    return [day, month, year].join('/');\n}\n\nexport function addDays(date, days) {\n    var dt = new Date(date.valueOf());\n    dt.setDate(dt.getDate() + days);\n    return dt;\n}\n\nexport function toTimestamp(strDate){\n    var datum = Date.parse(strDate);\n    return datum/1000;\n }","import React from 'react';\nimport { formatDate } from '../common/date'\n\nconst CityDataItem = ({ name, state, date, cases, deaths }) => {\n    return (\n        <div className='cityListItem'>\n            <span style={styles.lastUpdate}>Última atualização {formatDate(date)}</span><br />\n            <span style={styles.cityName}><b>{name}/{state}</b></span><br />\n            <span style={styles.dataValue}><b>Casos:</b> {cases}</span>\n            <span> | </span>\n            <span style={styles.dataValue}><b>Óbitos:</b> {deaths}</span>\n        </div>)\n};\n\nconst styles = {\n    lastUpdate: {\n        color: '#949494',\n        fontSize: '.6em'\n    },\n    cityName: {\n        fontSize: '1em'\n    },\n    dataValue: {\n        color: '#3b3b3b',\n        fontSize: '.9em'\n    }\n}\n\nexport default CityDataItem","require('dotenv/config');\n\nexport function read_list(str, sep=','){\n    if(str){\n        return str.split(sep)\n    }\n}\n\n\nconst env = {\n    MAPBOX_ACCESS_TOKEN : process.env.REACT_APP_MAPBOX_ACCESS_TOKEN,\n    BACKEND_URL: process.env.REACT_APP_BACKEND_URL || 'http://localhost:3000',\n    MAPBOX_ACCESS_TOKEN_LIST: read_list(process.env.MAPBOX_ACCESS_TOKEN_LIST),\n}\n\n\n\n\nexport default env","import React from 'react'\nimport '../style/SpinnerStyle.css'\n\nexport default function Spinner() {\n    return (\n        <div>\n            <div className=\"spinner\"> </div>\n        </div>\n        \n    )\n}\n","import React from 'react'\nimport Spinner from './Spinner'\n\nexport default function LoadingOpacity({ loading, text, style }) {\n    return (\n        <div style={{...style}} className={loading ? 'loadingVisible' : 'loadingInvisible'}>\n            {\n                loading && (\n                    <div className='opacityLoaderText'>\n                        <Spinner/>\n                        {text && <span>{text}</span>}\n                    </div>\n                )\n            }\n        </div>\n    )\n}","import React, { Component } from 'react';\nimport mapboxgl from 'mapbox-gl'\nimport ReactList from 'react-list'\nimport { formatDate, daysBetween, addDays } from '../common/date'\nimport CityDataItem from './CityDataItem'\nimport env from '../env/envVars'\n//import Lock from './Lock'\nimport { NotificationManager } from 'react-notifications';\nimport LoadingOpacity from '../components/LoadingOpacity'\n\nmapboxgl.accessToken = env.MAPBOX_ACCESS_TOKEN\n\nclass MapBox extends Component {\n    constructor(props) {\n        super(props);\n\n        let initialDate = new Date('2020-02-25')\n\n        this.baseUrl = env.BACKEND_URL\n\n        this.onSourceLoadBegin = this.props.onSourceLoadBegin\n        this.onSourceLoadFinished = this.props.onSourceLoadFinished\n\n        this.state = {\n            lng: props.lng || 5,\n            lat: props.lat || 34,\n            zoom: props.zoom || 2,\n            date: new Date(),\n            sliderValue: daysBetween(new Date('2020-02-25'), new Date()),\n            data: this.props.data,\n            listableCities: [],\n            animate: false,\n            initialDate: initialDate,\n            maxDays: daysBetween(initialDate, new Date()),\n            mapType: 'infected',\n            loadState: 'loading',\n            isMapInteractive: false,\n            loadingText: 'Carregando mapa do Brasil...',\n            featuresLength: undefined,\n        };\n    }\n\n    renderCityListItem = (index, key) => {\n        const data = this.state.listableCities[index]\n        return <CityDataItem name={data.city} state={data.state} date={new Date(data.date)}\n            cases={data.totalCases} deaths={data.deaths} key={key} />\n    }\n\n    getHeatmapFeatures() {\n        return this.state.map.queryRenderedFeatures({ layers: ['all-cities'] })\n    }\n\n    processVisibleCities(features) {\n\n        if (!features || features.length === 0) {\n            return [[], {}]\n        }\n\n        let cityData = {}\n        let perDate = {}\n        if (features) {\n            features = features.sort((a, b) => new Date(a.date) - new Date(b.date))\n                .map(feature => feature.properties)\n\n            for (let feature of features) {\n                let city = feature.city\n                if (!perDate.hasOwnProperty(feature.date)) perDate[feature.date] = []\n                if (!cityData.hasOwnProperty(city) && feature.timestamp <= this.state.date.getTime()) cityData[city] = feature\n                perDate[feature.date].push(feature)\n            }\n            return [Object.keys(cityData).map(key => cityData[key]), perDate];\n        }\n        return [[], {}]\n    }\n\n    updateVisibleCities(force=false) {\n        this.setInteractive(false, this.state.map, () => {\n\n            setTimeout(()=>{\n                this.setState({\n                    loadingText: 'Obtendo cidades visíveis...'\n                })\n    \n                let cityData, perDate, listable\n                let features = this.getHeatmapFeatures()\n\n                if ( \n                    force ||\n                    features.length < 50 ||\n                    this.state.featuresLength !== features.length ||\n                    this.state.animate\n                    ) {\n\n                    this.setState({\n                        loadingText: 'Gerando dados para a lista de cidades e gráficos...',\n                        featuresLength: features.length\n                    })\n                    \n                    const processed = this.processVisibleCities(features)\n                    cityData = processed[0]\n                    perDate = processed[1]\n\n                    listable = cityData.sort((a, b) => a.totalCases - b.totalCases).reverse()\n    \n                    this.setState({listableCities: listable})\n\n                    this.props.onVisibleCitiesChange &&\n                        this.props.onVisibleCitiesChange(cityData, perDate)\n\n                    if(!this.state.animate) setTimeout(() => {\n                        this.setInteractive(true, this.state.map)\n                    }, 30)\n                }\n                else {\n                    if(!this.state.animate) setTimeout(() => {\n                        this.setInteractive(true, this.state.map)\n                    }, 30)\n                }\n            }, 20)\n            \n        })\n    }\n\n    animatedStep() {\n        if (this.state.animate) {\n            this.setInteractive(false)\n            NotificationManager.info(\"A interação com o mapa será desetivada enquanto a animação ocorrer.\", \"Animação ativada\")\n\n            if (this.state.sliderValue >= this.state.maxDays) {\n                this.changeSlider(0)\n                this.onSliderChangeEndedAsync(0)\n            }\n\n            this.animateTimeout = setInterval(() => {\n                if (this.state.sliderValue <= this.state.maxDays) {\n                    this.changeSlider(this.state.sliderValue + 1)\n                    this.onSliderChangeEndedAsync(this.state.sliderValue + 1)\n                }\n                else {\n                    this.changeSlider(0)\n                    this.onSliderChangeEndedAsync(0)\n                }\n            }, 4000);\n        }\n        else if (this.animateTimeout) {\n            this.state.loadState === 'loaded' && this.setInteractive(true)\n            clearInterval(this.animateTimeout)\n        }\n    }\n\n    changeSlider(value) {\n        let sliderValue = parseInt(value)\n        this.setState({\n            sliderValue: sliderValue,\n            date: addDays(this.state.initialDate, sliderValue),\n        })\n    }\n\n    onSliderChangeEndedAsync = async (value) => {\n        let date = addDays(this.state.initialDate, parseInt(value))\n        this.state.map.setFilter('covid-heatmap', ['<=', ['number', ['get', 'timestamp']], date.getTime()])\n        this.state.map.setFilter('covid-heatmap-death', ['<=', ['number', ['get', 'timestamp']], date.getTime()])\n        this.state.map.setFilter('covid-point', ['==', ['number', ['get', 'timestamp']], date.getTime()])\n        this.updateVisibleCities()\n        this.props.onSelectedDateChanged && this.props.onSelectedDateChanged(date)\n    }\n\n    handleMapTypeChange(event) {\n        this.setState({ mapType: event.target.value })\n\n        let layers = {\n            death: 'covid-heatmap-death',\n            infected: 'covid-heatmap'\n        }\n\n        if (event.target.value === 'infected') {\n            this.state.map.setLayoutProperty(layers.infected, 'visibility', 'visible')\n            this.state.map.setLayoutProperty(layers.death, 'visibility', 'none')\n        } else {\n            this.state.map.setLayoutProperty(layers.infected, 'visibility', 'none')\n            this.state.map.setLayoutProperty(layers.death, 'visibility', 'visible')\n        }\n    }\n\n    handleAnimateChange = (event) => {\n        this.setState({ animate: event.target.checked }, () => {\n            this.animatedStep()\n        })\n    }\n\n    render() {\n        const daysAgo = () => {\n            let daysAgo = daysBetween(this.state.date, new Date())\n            if (daysAgo === 0) return <span>(hoje)</span>\n            if (daysAgo === 1) return (<span>(ontem)</span>)\n            else return (<span>(há <strong>{daysAgo}</strong> dias)</span>)\n        }\n\n        return (\n            <div style={this.props.containerStyle}>\n                <LoadingOpacity\n                    loading={!this.state.isMapInteractive && !this.state.animate}\n                    style={this.props.style}\n                    text={this.state.loadingText}\n                />\n\n                <div className='console'>\n                    <h1 className='consoleTitle'>Mapa de calor: COVID-19 no Brasil</h1>\n                    <label>\n                        <span style={{ fontSize: '1.1em' }}> Até o dia <strong>{formatDate(this.state.date)}</strong> {daysAgo()}</span>\n                        <input className='slider row' type='range' min='0' max={this.state.maxDays} step='1' value={this.state.sliderValue}\n                            onChange={(e) => this.changeSlider(e.target.value)}\n                            onMouseUp={(e) => this.onSliderChangeEndedAsync(e.target.value)} />\n                    </label>\n                    <form>\n                        <label>\n                            <input name=\"animate\" type=\"checkbox\" checked={this.state.animate} onChange={this.handleAnimateChange} />\n                            Animar\n                        </label>\n                    </form>\n                    <form>\n                        <label>\n                            <input type=\"radio\" value=\"infected\" checked={this.state.mapType === 'infected'}\n                                onChange={(e) => this.handleMapTypeChange(e)} />\n                            Casos\n                       </label>\n                        <span> | </span>\n                        <label>\n                            <input type=\"radio\" value=\"death\" checked={this.state.mapType === 'death'}\n                                onChange={(e) => this.handleMapTypeChange(e)} />\n                            Óbitos\n                      </label>\n                    </form>\n                    <div>\n\n                    </div>\n                    <div className='cityList'>\n                        {(this.state.listableCities.length > 0) ? (<ReactList\n                            itemRenderer={/*::*/this.renderCityListItem}\n                            length={this.state.listableCities.length}\n                            type='uniform'\n                            pageSize={3}\n                        />)\n                            :\n                            (<p style={{ textAlign: 'center', fontStyle: 'italic' }}>\n                                (Use o zoom e a navegação pelo mapa para ver os detalhes de cada localidade.)</p>)}\n                    </div>\n                    <div style={{ color: 'gray', fontSize: '0.5em', bottom: 0, position: 'absolute' }}>\n                        <p>\n                            <span><strong>Zoom: </strong>{this.state.zoom}</span>\n                            <span> | </span>\n                            <span><strong>Centro: </strong>{this.state.lat}, {this.state.lng}</span>\n                        </p>\n                    </div>\n                </div>\n\n                <div style={this.props.style} ref={el => this.mapContainer = el} />\n\n\n            </div>\n        )\n    }\n\n    setInteractive = (isInteractive, mapObj, onSetFinished = undefined) => {\n        let map = mapObj || this.state.map\n        const properties = ['boxZoom', 'scrollZoom', 'dragPan', 'dragRotate',\n            'keyboard', 'doubleClickZoom', 'touchZoomRotate']\n\n        const enable = () => {\n            properties.forEach((prop) => { map[prop].enable() })\n        }\n\n        const disable = () => {\n            properties.forEach((prop) => { map[prop].disable() })\n        }\n\n        this.setState({\n            isMapInteractive: isInteractive,\n        }, () => {\n            isInteractive ? enable() : disable()\n            onSetFinished && onSetFinished()\n        })\n    }\n\n    componentDidMount() {\n        this.onSourceLoadBegin && this.onSourceLoadBegin()\n\n        const map = new mapboxgl.Map({\n            container: this.mapContainer,\n            style: 'mapbox://styles/aest/ck93dlpxn00v21imgp8zz3y6x?optimize=true',\n            center: [this.state.lng, this.state.lat],\n            zoom: this.state.zoom,\n            minPitch: 0,\n            maxPitch: 0,\n            pitchWithRotate: false,\n            logoPosition: 'bottom-right',\n        })\n\n        this.setState({ map: map })\n        this.setInteractive(false, map)\n\n        map.on('move', () => {\n            this.setState({\n                lng: map.getCenter().lng.toFixed(4),\n                lat: map.getCenter().lat.toFixed(4),\n                zoom: map.getZoom().toFixed(2)\n            });\n        });\n\n        map.once('idle', () => {\n            this.onSourceLoadFinished && !this.state.animate && this.onSourceLoadFinished()\n            if (this.state.loadState === 'loading') {\n                this.setState({\n                    loadState: 'loaded'\n                }, ()=>{\n                    this.updateVisibleCities()\n                })\n            }\n        })\n\n        map.on('moveend', () => {\n            this.setInteractive(false, map, () => { this.updateVisibleCities() })\n        })\n\n        /*\n        map.on('dragend', () => {\n            this.setInteractive(false, map, () => {  })\n            this.updateVisibleCities()\n        })\n        */\n\n        /*map.on('idle', () => {\n        })*/\n\n        map.on('zoomend', () => {\n            this.setInteractive(false, map, () => { this.updateVisibleCities() })\n        })\n\n        map.on('touchend', () => {\n            this.setInteractive(false, map, () => { this.updateVisibleCities() })\n        })\n\n        map.on('load', () => {\n\n            this.setState({\n                loadingText: 'Baixando dados das cidades e construindo mapa...'\n            })\n\n            map.addSource('covid', {\n                'type': 'geojson',\n                'data': `${this.baseUrl}/api/v1/br/cities.geojson`\n            })\n\n            map.addSource('covid-cities-daily', {\n                'type': 'geojson',\n                'data': `${this.baseUrl}/api/v1/br/cities-daily.geojson`\n            })\n\n            map.addLayer({\n                'id': 'covid-heatmap-death',\n                'type': 'heatmap',\n                'source': 'covid',\n                'visibility': 'none',\n                'paint': {\n                    // Increase the heatmap weight based on frequency and property magnitude\n                    'heatmap-weight': [\n                        'interpolate', ['linear'], ['number', ['get', 'newDeaths']], 0, 0, 20, 1\n                    ],\n                    // Increase the heatmap color weight weight by zoom level\n                    // heatmap-intensity is a multiplier on top of heatmap-weight\n                    'heatmap-intensity': [\n                        'interpolate', ['linear'], ['zoom'], 0, 1, 9, 3\n                    ],\n                    // Color ramp for heatmap.  Domain is 0 (low) to 1 (high).\n                    // Begin color ramp at 0-stop with a 0-transparancy color\n                    // to create a blur-like effect.\n                    'heatmap-color': [\n                        'interpolate', ['linear'], ['heatmap-density'],\n                        0, 'rgba(255,237,68,0)',\n                        0.1, '#E75151',\n                        0.2, '#D34848',\n                        0.3, '#BF3F3F',\n                        0.4, '#972D2D',\n                        0.5, '#9e001f',\n                        0.6, '#832424',\n                        0.7, '#6F1B1B',\n                        0.8, '#5B1212',\n                        0.9, '#470909',\n                        1, '#330000',\n                    ],\n                    // Adjust the heatmap radius by zoom level\n                    'heatmap-radius': [\n                        'interpolate', ['linear'], ['zoom'], 0, 2, 9, 20\n                    ],\n                    // Transition from heatmap to circle layer by zoom level\n                    'heatmap-opacity': ['interpolate', ['linear'], ['zoom'], 7, 1, 15, 0]\n                },\n                //filter: ['<=', ['number', ['get', 'timestamp']], this.state.date]\n            },\n                'waterway-label'\n            );\n\n            map.addLayer({\n                'id': 'covid-heatmap',\n                'type': 'heatmap',\n                'source': 'covid',\n                'paint': {\n                    // Increase the heatmap weight based on frequency and property magnitude\n                    'heatmap-weight': [\n                        'interpolate', ['linear'], ['number', ['get', 'newCases']], 0, 0, 20, 1\n                    ],\n                    // Increase the heatmap color weight weight by zoom level\n                    // heatmap-intensity is a multiplier on top of heatmap-weight\n                    'heatmap-intensity': [\n                        'interpolate', ['linear'], ['zoom'], 0, 1, 9, 3\n                    ],\n                    // Color ramp for heatmap.  Domain is 0 (low) to 1 (high).\n                    // Begin color ramp at 0-stop with a 0-transparancy color\n                    // to create a blur-like effect.\n                    'heatmap-color': [\n                        'interpolate', ['linear'], ['heatmap-density'],\n                        0, 'rgba(0,0,0,0)',\n                        0.1, '#007083',\n                        0.2, '#009a94',\n                        0.3, '#00c385',\n                        0.4, '#fdfd25',\n                        0.5, '#fdd525',\n                        0.6, '#fd9f25',\n                        0.7, '#fd6625',\n                        0.8, '#e6441c',\n                        0.9, '#E34519',\n                        1, '#c9240e'\n                    ],\n                    // Adjust the heatmap radius by zoom level\n                    'heatmap-radius': [\n                        'interpolate', ['linear'], ['zoom'], 0, 2, 9, 20\n                    ],\n                    // Transition from heatmap to circle layer by zoom level\n                    'heatmap-opacity': ['interpolate', ['linear'], ['zoom'], 7, 1, 15, 0]\n                },\n                //filter: ['<=', ['number', ['get', 'timestamp']], this.state.date]\n            },\n                'waterway-label'\n            );\n\n            map.addLayer({\n                'id': 'covid-point',\n                'type': 'circle',\n                'source': 'covid-cities-daily',\n                'minzoom': 8,\n                'paint': {\n                    // Size circle radius by earthquake magnitude and zoom level\n                    'circle-radius': [\n                        'interpolate', ['linear'], ['zoom'],\n                        7,\n                        ['interpolate', ['linear'], ['number', ['get', 'totalCases']], 1, 1, 6, 4],\n                        16,\n                        ['interpolate', ['linear'], ['number', ['get', 'totalCases']], 1, 5, 6, 50]\n                    ],\n                    // Color circle by earthquake magnitude\n                    'circle-color': [\n                        'interpolate', ['linear'], ['number', ['get', 'totalCases']],\n                        1, 'rgba(33,102,172,0)', 2, 'rgb(178,24,43)'\n                    ],\n                    'circle-stroke-color': 'white', 'circle-stroke-width': 1,\n                    'circle-opacity': ['interpolate', ['linear'], ['zoom'], 7, 0, 8, 1]\n                },\n                //filter: ['==', ['number', ['get', 'timestamp']], this.state.date],\n            },\n                'waterway-label'\n            );\n\n            map.addLayer({\n                'id': 'all-cities',\n                'type': 'circle',\n                'source': 'covid',\n                'minzoom': 2.8,\n                'paint': {\n                    'circle-color': 'rgba(0,0,0,0)',\n                    'circle-stroke-width': 0,\n                },\n            },\n            );\n\n        });\n\n\n    }\n}\n\n\n\nexport default MapBox;","import React from 'react'\n\nconst SimpleLink = ({ children, url, text, style, target='_blank'}) => {\n\n    if(children){\n        return (\n            <a href={url} style={style} target={target}>\n                {children}\n            </a>\n        )\n    }\n    if(text){\n        return (<a href={url} style={style} target={target}>{text}</a>)\n    }\n    return <a href={url} style={style} target={target}>{url}</a>\n}\nexport default SimpleLink","import React from 'react'\nimport SimpleLink from './Link'\n\nexport default function Footer() {\n    return (\n        <div className='footer'>\n\n            <strong style={{'fontSize': '1.2em'}}>Importante:</strong>\n\n            <p>\n            <strong>Este é apenas um experimento em visualização de dados.</strong>\n            </p>\n\n            <p>Não sou especialista em visualização de dados nem em disseminação de doenças, então\n            não confie nos dados deste site, é apenas uma tentativa de visualizar a disseminação\n            da doença e pode (certamente não) corresponder com a realdade.</p>\n            \n            <p>\n            Então lembre-se de considerar que qualquer dado pode parecer mais ou menos alarmante \n            dependendo da forma como é apresentado e que eu não tenho a competência necessária\n            para availiar isso de forma totalmente correta.\n            </p>\n\n            <p>\n            Sugestões ou correções podem ser enviadas pelo GitHub (link a seguir).\n            </p>\n\n            <hr/>\n\n            <p>\n                <strong>Meu perfil no GitHub:  </strong>\n\n                <SimpleLink url='https://github.com/ALREstevam' />\n            </p>\n            \n            <p>\n                <strong>Repositórios deste projeto no GitHub:  </strong>\n                <SimpleLink url='https://github.com/ALREstevam/covid19-br-vis-back'/>\n                <span> e </span>\n                <SimpleLink url='https://github.com/ALREstevam/covid19-br-vis-back'/>\n                <span>.</span>\n            </p>\n            \n        </div>\n    )\n}\n","import React from 'react'\nimport { ResponsiveLine } from '@nivo/line'\n\nfunction fixDecimalPlaces(num, decimalPlaces = 2) {\n    if (typeof num === 'string' || num instanceof String) return num\n    if (Number.isInteger(num)) return num.toString()\n    else return Number(num).toFixed(decimalPlaces).toString()\n}\n\nfunction decimalOrDivisor(number, decimalPlaces=2){\n    const num = Number(number)\n    if(num > 1000)return num.toLocaleString('pt-br')\n    else return fixDecimalPlaces(num, decimalPlaces)\n}\n\nfunction abbreviateNumber(num, fixed = 2) {\n    if (num === null) { return null; } // terminate early\n    if (num === 0) { return '0'; } // terminate early\n    fixed = (!fixed || fixed < 0) ? 0 : fixed; // number of decimal places to show\n    var b = (num).toPrecision(2).split(\"e\"), // get power\n        k = b.length === 1 ? 0 : Math.floor(Math.min(b[1].slice(1), 14) / 3), // floor at decimals, ceiling at trillions\n        c = k < 1 ? num.toFixed(0 + fixed) : (num / Math.pow(10, k * 3)).toFixed(1 + fixed), // divide by power\n        d = c < 0 ? c : Math.abs(c), // enforce -0 is 0\n        e = d + ['', 'K', 'M', 'B', 'T'][k]; // append power\n    return e;\n}\n\nfunction formatNumber(number, decimalPlaces=2){\n    const num = Number(number)\n    if(num > -20 && num < 20) return fixDecimalPlaces(num, decimalPlaces)\n    else  return abbreviateNumber(num, decimalPlaces)\n}\n\nfunction showEvery(n) {\n    let current = 0\n    return (value) => {\n        current += 1\n        if (current % n === 0) {\n            current = 0\n            return value\n        } else {\n            return ''\n        }\n    }\n}\n\nconst showSometimes = showEvery(7)\n\nconst theme = {\n    axis: {\n        textColor: \"#eee\",\n        fontSize: 10,\n        tickColor: \"#eee\"\n    },\n    grid: {\n        stroke: \"#888\",\n        strokeWidth: 1\n    },\n    pointLabel: {\n        textColor: \"#eee\",\n        fontSize: 20\n    },\n    dots: {\n        text: {\n            fontSize: 10,\n        },\n    },\n\n}\n\nconst scales = {\n    linear: (stacked) => {\n        return {\n            type: 'linear', min: 0, max: 'auto', stacked: stacked, reverse: false\n        }\n    },\n    linearZeroOne: (stacked) => {\n        return {\n            type: 'linear', min: 0, max: 1, stacked: stacked, reverse: false\n        }\n    },\n    linearMinusOnePlusOne: (stacked) => {\n        return {\n            type: 'linear', min: -1, max: 1, stacked: stacked, reverse: false\n        }\n    },\n    log10: (stacked) => {\n        return {\n            type: 'log', base: 10, max: 'auto', stacked: stacked, reverse: false\n        }\n    }\n}\n\nconst Tootip = ({node, data}) => {\n    let last = undefined\n    let lasty = 0\n\n    let index = Number.parseInt(node.point.id.split('.')[1])\n    \n    if (index > 0) {\n        last = data.filter(data => data.id === node.point.serieId)[0].data[index - 1]\n        lasty = last.y\n    }\n\n    let lastDiff = node.point.data.yFormatted - lasty\n    let lastDiffStr = fixDecimalPlaces(lastDiff)\n    lastDiffStr = lastDiff >= 0 ? `+${decimalOrDivisor(lastDiffStr)}` : `${decimalOrDivisor(lastDiffStr)}`\n\n    return (\n        <div style={{\n            color: node.point.serieColor,\n            backgroundColor: '#fff',\n            padding: '5px',\n            border: `1px solid ${node.point.borderColor}`,\n            textAlign: 'center',\n            borderRadius: '5px',\n            boxShadow: '5px 5px 10px -7px rgba(0,0,0,0.75)'\n        }}>\n            <strong style={{ fontSize: '.9em' }}>{node.point.data.xFormatted}</strong><br />\n            <span>{node.point.serieId}: <strong>{decimalOrDivisor(node.point.data.yFormatted)}</strong>\n                <br />\n                <span> ({lastDiffStr})</span>\n            </span>\n        </div>\n    )\n}\n\n\nconst LinePLot = ({ data, colors = { scheme: 'set3' }, stacked = false, yScaleType = 'linear' }) => {\n    return (<ResponsiveLine\n        data={data}\n        margin={{ top: 50, right: 120, bottom: 100, left: 90 }}\n        tooltip={(node)=>(<Tootip node={node} data={data}/>)}\n        xScale={{\n            type: 'time', //point, time, linear\n            //min: 0,\n            //max: 'auto',\n            format: \"%Y-%m-%dT%H:%M:%S\",\n            //precision: \"hour\",\n            //2020-02-25T00:00:00\n        }}\n\n        yScale={scales[yScaleType](stacked)}\n\n        xFormat=\"time:%m/%d\"\n        /*yFormat={}*/\n\n        theme={theme}\n        curve=\"natural\"\n        axisTop={null}\n        axisRight={null}\n        axisBottom={{\n            orient: 'bottom',\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            legend: 'Tempo',\n            legendOffset: 36,\n            legendPosition: 'middle',\n            format: '%d/%m',\n        }}\n        axisLeft={{\n            legend: 'Pessoas',\n            orient: 'left',\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            legendOffset: -40,\n            legendPosition: 'middle',\n            format: (n) => formatNumber(n, 2),\n        }}\n        colors={colors}\n        pointSize={3}\n        pointBorderWidth={3}\n        pointColor={{ theme: 'background' }}\n        pointBorderColor={{ from: 'serieColor' }}\n        \n        enablePointLabel={true}\n        pointLabel={e => showSometimes(formatNumber(e.y, 4))}\n        pointLabelYOffset={-12}\n        \n        useMesh={true}\n        legends={[\n            {\n                anchor: 'bottom-left',\n                direction: 'row',\n                justify: false,\n                translateX: 0,\n                translateY: 90,\n                itemsSpacing: 0,\n                itemDirection: 'left-to-right',\n                itemWidth: 80,\n                itemHeight: 20,\n                itemOpacity: 0.75,\n                symbolSize: 12,\n                symbolShape: 'circle',\n                symbolBorderColor: 'rgba(0, 0, 0, .5)',\n                effects: [\n                    {\n                        on: 'hover',\n                        style: {\n                            itemBackground: 'rgba(0, 0, 0, .03)',\n                            itemOpacity: 1\n                        }\n                    }\n                ]\n            }\n        ]}\n    />)\n}\n\n\nexport default LinePLot","export default class MapDataExtractor {\n    constructor() {\n        this.processedData = undefined\n        this.rawData = undefined\n        this.untilDate = undefined\n        this.filteredIndexes = undefined\n\n        this.casesPlotData = undefined\n        this.casesGrowthFactorPlotData = undefined\n        this.deathsPlotData = undefined\n        this.deathsGrowthRateData = undefined\n        this.deathsOverCasesData = undefined\n        this.newCasesData = undefined\n        this.newDeathsData = undefined\n        this.casesDeathsPerStateAndCityData = undefined\n    }\n\n    makeDataset(rawData, untilDate) {\n        this.rawData = rawData\n        this.untilDate = untilDate\n\n        this.filteredIndexes = Object.keys(rawData)\n            .filter(dt =>\n                (untilDate.setHours(0, 0, 0, 0) > (new Date(dt).setHours(0, 0, 0, 0)))\n            )\n            .sort((a, b) => (new Date(a)) - (new Date(b)))\n\n\n        this.processedData = this.filteredIndexes\n            .map(key => rawData[key]\n                .reduce(\n                    (sum, city) => {\n                        return {\n                            date: key,\n                            deaths: sum.deaths + city.deaths,\n                            newCases: sum.newCases + city.newCases,\n                            newDeaths: sum.newDeaths + city.newDeaths,\n                            totalCases: sum.totalCases + city.totalCases,\n                        }\n                    }, {\n                        date: undefined,\n                        deaths: 0,\n                        newCases: 0,\n                        newDeaths: 0,\n                        totalCases: 0,\n                    })\n            )\n        return this.processedData\n    }\n\n    yGrowthFactor(array) {\n        let growthFactor = []\n        let pair = [ /*yesterday, today*/ ]\n\n        for (let el of array) {\n            pair.push(el)\n            if (pair.length === 2) {\n                let y = (pair[0].y === 0) ? (0) : ((pair[1].y / pair[0].y) - 1)\n\n                growthFactor.push({\n                    x: el.x,\n                    y: y,\n                })\n                pair = [el] //today becomes yesterday\n            }\n        }\n        return growthFactor\n    }\n\n    generateNewCasesPlotData() {\n        return this.newCasesData = {\n            \"id\": \"# novos casos / dia\",\n            \"color\": \"#61cdbb\",\n            \"data\": this.processedData.map(day => {\n                return {\n                    x: day.date,\n                    y: day.newCases,\n                }\n            })\n        }\n    }\n\n    generateNewDeathsPlotData() {\n        return this.newDeathsData = {\n            \"id\": \"# novos óbitos / dia\",\n            \"color\": \"#61cdbb\",\n            \"data\": this.processedData.map(day => {\n                return {\n                    x: day.date,\n                    y: day.newDeaths,\n                }\n            })\n        }\n    }\n\n    generateCasesPlotData() {\n        return this.casesPlotData = {\n            \"id\": \"Casos\",\n            \"color\": \"#61cdbb\",\n            \"data\": this.processedData.map(day => {\n                return {\n                    x: day.date,\n                    y: day.totalCases,\n                }\n            })\n        }\n    }\n\n    generateDeathsPlotData() {\n        return this.deathsPlotData = {\n            \"id\": \"Óbitos\",\n            \"color\": \"#f47560\",\n            \"data\": this.processedData.map(day => {\n                return {\n                    x: day.date,\n                    y: day.deaths,\n                }\n            })\n        }\n    }\n\n    generateCasesGrowthFactorPlotData() {\n        const cases = this.casesPlotData && this.casesPlotData.data.length > 0 ? this.casesPlotData : this.generateCasesPlotData()\n        return this.casesGrowthFactorPlotData = {\n            id: 'GR casos',\n            color: '#f47560',\n            data: this.yGrowthFactor(cases.data)\n        }\n    }\n\n    generateDeathsGrowthFactorPlotData() {\n        const deaths = this.deathsPlotData && this.deathsPlotData.data.length > 0 ? this.deathsPlotData : this.generateDeathsPlotData()\n        return this.deathsGrowthRateData = {\n            id: 'GR óbitos',\n            color: '#f47560',\n            data: this.yGrowthFactor(deaths.data)\n        }\n    }\n\n    generateDeathsOverCases() {\n\n        const deaths = this.deathsPlotData && this.deathsPlotData.data.length > 0 ? this.deathsPlotData : this.generateDeathsPlotData()\n        const cases = this.casesPlotData && this.casesPlotData.data.length > 0 ? this.casesPlotData : this.generateCasesPlotData()\n\n        const deathsDates = deaths.data.map(el => el.x)\n        const casesDates = cases.data.map(el => el.x)\n\n        const dates = deathsDates.filter(e => casesDates.includes(e))\n\n        const deathsData = deaths.data.filter(el => el.y > 0 && dates.includes(el.x))\n        const casesData = cases.data.filter(el => el.y > 0 && dates.includes(el.x))\n\n        let deathsOverCases = []\n\n        for (let i = 0; i < deathsData.length; i++) {\n            let casesDay = deathsData[i]\n            let deathsDay = casesData[i]\n\n            if (casesDay.y > 0 && deathsDay.y > 0) {\n                deathsOverCases.push({\n                    x: casesDay.x,\n                    y: deathsDay.y / casesDay.y,\n                })\n            }\n        }\n\n        return this.deathsOverCasesData = {\n            id: 'casos/óbitos',\n            color: '#f47560',\n            data: deathsOverCases\n        }\n    }\n\n    generateChartData() {\n\n        return {\n            deaths: this.deathsPlotData && this.deathsPlotData.data.length > 0 ?\n                this.deathsPlotData : this.generateDeathsPlotData(),\n            cases: this.casesPlotData && this.casesPlotData.data.length > 0 ?\n                this.casesPlotData : this.generateCasesPlotData(),\n            casesGrowthFactor: this.casesGrowthFactorPlotData && this.casesGrowthFactorPlotData.data.length > 0 ?\n                this.casesGrowthFactorPlotData : this.generateCasesGrowthFactorPlotData(),\n            deathGrowthFactor: this.deathsGrowthRateData && this.deathsGrowthRateData.data.length > 0 ?\n                this.deathsGrowthRateData : this.generateDeathsGrowthFactorPlotData(),\n            deathsOverCases: this.deathsOverCasesData && this.deathsOverCasesData.data.length > 0 ?\n                this.deathsOverCasesData : this.generateDeathsOverCases(),\n            newCases: this.newCasesData && this.newCasesData.data.length > 0 ?\n                this.newCasesData : this.generateNewCasesPlotData(),\n            newDeaths: this.newDeathsData && this.newDeathsData.data.length > 0 ?\n                this.newDeathsData : this.generateNewDeathsPlotData(),\n            casesDeathsPerLocation: this.generateCasesDeathsPerStateAndCity(),\n        }\n    }\n\n    generateCasesDeathsPerStateAndCity(){\n\n        let perState = {}\n        let perCity = {}\n\n        const perDayData = this.filteredIndexes.map(key => this.rawData[key])\n\n        //console.log('perDayData', perDayData)\n\n        if(!perDayData || perDayData.length === 0){\n            return { perState: {}, perCity: {}, }\n        }\n\n        const lastDay = perDayData[perDayData.length - 1]\n\n        for(let report of lastDay){\n            // state\n            if( perState.hasOwnProperty(report.state) ){\n                perState[report.state] = {\n                    state: report.state,\n                    deaths: report.deaths + perState[report.state].deaths,\n                    cases: report.totalCases + perState[report.state].cases\n                }\n            }\n            else{\n                perState[report.state] = {\n                    state: report.state,\n                    deaths: report.deaths,\n                    cases: report.totalCases\n                }\n            }\n            // city\n            if( perCity.hasOwnProperty(report.city) ){\n                perState[report.city] = {\n                    city: report.city,\n                    deaths: report.deaths + perState[report.city].deaths,\n                    cases: report.totalCases + perState[report.city].cases\n                }\n            }\n            else{\n                perState[report.city] = {\n                    city: report.city,\n                    deaths: report.deaths,\n                    cases: report.totalCases\n                }\n            }\n        }\n\n        return { \n            perState: Object.keys( perState ).map(key => perState[key]), \n            perCity: Object.keys( perState ).map(key => perState[key]), \n        }\n    }\n\n    removeZeroes(plotData) {\n        return {\n            ...plotData,\n            ...{\n                data: plotData.data.filter(el => el.y > 0)\n            }\n        }\n    }\n\n    makeTitle() {\n        const visibleCitiesPerDate = this.rawData\n\n        if (Object.keys(visibleCitiesPerDate).length === 0) return 'COVID-19 em ...'\n\n        let data = visibleCitiesPerDate[Object.keys(visibleCitiesPerDate)[0]]\n\n\n        let states = Array.from(new Set(data.map(city => city.state)))\n\n        if ( /*data.length > 350 || */ states.length >= 25) return 'COVID-19 em todo o Brasil'\n        if (data.length > 40) {\n            let showStates = states.slice(0, 3)\n            if (states.length - 3 > 1) return 'COVID-19 em parte de ' + showStates.join(', ') + ' e outros ' + (states.length - 3) + ' estados'\n            if (states.length - 3 === 1) return 'COVID-19 em parte de ' + showStates.join(', ') + ' e outro estado'\n            else {\n                if (showStates.length === 3) return 'COVID-19 em ' + showStates.join(', ')\n                if (showStates.length === 2) return 'COVID-19 em ' + showStates.join(' e ')\n                else return 'COVID-19 em ' + showStates[0]\n            }\n        } else {\n            let cities = data.map(city => city.city).filter(city => city !== 'CASO SEM LOCALIZAÇÃO DEFINIDA')\n            let showCities = cities.slice(0, 3)\n\n            if (cities.length - 3 > 1) return 'COVID-19 em ' + showCities.join(', ') + ' e outras ' + (cities.length - 3) + ' cidades'\n            if (cities.length - 3 === 1) return 'COVID-19 em ' + showCities.join(', ') + ' e outra cidade'\n            else {\n                if (showCities.length === 3) return 'COVID-19 em ' + showCities.join(', ')\n                if (showCities.length === 2) return 'COVID-19 em ' + showCities.join(' e ')\n                else return 'COVID-19 em ' + showCities[0]\n            }\n        }\n    }\n}","import React from 'react';\n\nexport const GrowthRateFormula = () => {\n    return (<math xmlns=\"http://www.w3.org/1998/Math/MathML\">\n        <mstyle displaystyle=\"true\">\n            <mrow className=\"MJX-TeXAtom-ORD\">\n                <mi>g</mi>\n                <mi>r</mi>\n                <mo>=</mo>\n                <mfrac>\n                    <mrow>\n                        <mi>v</mi>\n                        <mi>a</mi>\n                        <mi>l</mi>\n                        <mi>o</mi>\n                        <msub>\n                            <mi>r</mi>\n                            <mrow className=\"MJX-TeXAtom-ORD\">\n                                <mi>d</mi>\n                                <mi>i</mi>\n                                <mi>a</mi>\n                            </mrow>\n                        </msub>\n                    </mrow>\n                    <mrow>\n                        <mi>v</mi>\n                        <mi>a</mi>\n                        <mi>l</mi>\n                        <mi>o</mi>\n                        <msub>\n                            <mi>r</mi>\n                            <mrow className=\"MJX-TeXAtom-ORD\">\n                                <mi>d</mi>\n                                <mi>i</mi>\n                                <mi>a</mi>\n                                <mo>&#x2212;</mo>\n                                <mn>1</mn>\n                            </mrow>\n                        </msub>\n                    </mrow>\n                </mfrac>\n                <mo>&#x2212;</mo>\n                <mn>1</mn>\n            </mrow>\n        </mstyle>\n    </math>)\n}\n\n\n\nexport const GrowthRate = () => (\n    <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\n        <mstyle displaystyle=\"true\">\n            <mrow className=\"MJX-TeXAtom-ORD\">\n                <mi>g</mi>\n                <mi>r</mi>\n            </mrow>\n        </mstyle>\n    </math>\n)\n\nexport const GrGratherThenZero = () => (\n    <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\n        <mstyle displaystyle=\"true\">\n            <mrow className=\"MJX-TeXAtom-ORD\">\n                <mi>g</mi>\n                <mi>r</mi>\n                <mo>&gt;</mo>\n                <mn>0</mn>\n            </mrow>\n        </mstyle>\n    </math>\n)\n\nexport const GrLowerThenZero = () => (\n    <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\n        <mstyle displaystyle=\"true\">\n            <mrow className=\"MJX-TeXAtom-ORD\">\n                <mi>g</mi>\n                <mi>r</mi>\n                <mo>&lt;</mo>\n                <mn>0</mn>\n            </mrow>\n        </mstyle>\n    </math>\n)\n\nexport const GrApproxZero = () => (\n    <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\n        <mstyle displaystyle=\"true\">\n            <mrow className=\"MJX-TeXAtom-ORD\">\n                <mi>g</mi>\n                <mi>r</mi>\n                <mo>&#x2248;{/*≈*/}</mo>\n                <mn>0</mn>\n            </mrow>\n        </mstyle>\n    </math>\n)","import React from 'react';\n\nimport { GrowthRateFormula, GrowthRate, GrGratherThenZero, GrLowerThenZero, GrApproxZero } from './mathFormulas'\n\nexport default {\n    aboutSite: {\n        presentation: (\n            <p>\n                Este site contém um conjunto de experimentos de visualização de dados sobre o COVID-19 nos municípios brasileiros.\n                os dados foram extraídos de <a href='https://covid19br.wcota.me/'>https://covid19br.wcota.me/</a> e então processados no formato GEOJSON, adequado\n                para a construção de mapas interativos. Mais informações no rodapé.\n            </p>\n        ),\n        youCanDo: (\n            <p>\n                Navegue pelo mapa e use o zoom para selecionar uma região específica. Os gráficos abaixo se adequarão para mostrar\n                os dados das regioẽs visíveis no mapa.\n            </p>\n        )\n    },\n    growthFactor: {\n        mainExplanation: [\n            (<p key='gr1'>\n                O <strong>Fator de Crescimento</strong> (ou <em>Growth Factor</em>) reflete o crescimento percentual diário no número de casos e óbitos computados:\n            </p>),\n            (<p key='gr2'>\n                Este valor é calculado com a seguinte fórmula: <GrowthRateFormula />\n            </p>),\n            (<p  key='gr3'>\n                De forma especifica, o valor do <GrowthRate /> indica que o número de novos casos ou óbitos em um determinado dia pode ser obtido pela multiplicação da devida quantidade no dia anterior por <GrowthRate />.\n            </p>),\n        ],\n\n        parameters: (\n            <ul>\n                <li><GrGratherThenZero />: quantidade casos ou óbitos aumentando, quanto maior o valor, maior o crescimento diário.</li>\n                <li><GrLowerThenZero />: quantidade casos ou óbitos diminuindo, quanto menor o valor, maior é a diminuição na quantidade em comparação com o dia anterior.</li>\n                <li><GrApproxZero />: a quantidade de casos ou óbitos está estável, houve redução ou pequeno aumento entre os dias.</li>\n            </ul>\n        ),\n\n        about: [\n            (<p key='aboutgr1'>\n                O fator de crescimento é uma importante métrica na avaliação da disseminação da doença e ocorrência de mortes, mas\n                é totalmente dependente da testagem em massa da população e da confirmação da causa dos óbitos onde há suspeita de COVID-19,\n                assim, um aumento ou diminuição neste fator pode revelar tanto mudanças na quantidade real quanto no número de testes.\n            </p>),\n            (<p key='aboutgr2'>\n                É importante notar também que: nas primeiras semanas da infecção a quantidade de pacientes é muito pequena para termos valores concisos, assim, há uma grande flutuação num primeiro momento e com o tempo temos uma medida mais realista.\n            </p>),\n            (<p key='aboutgr3'>\n                De forma geral, espera-se que este valor mantenha-se acima de zero enquanto a doença estiver se alastrando, que se mantenha muito próxima ao zero quando o platô da infecção for atingido e que fique abaixo de zero durante sua redução.\n            </p>)\n        ],\n    },\n    specialChars: {\n        pointUp: '˄',\n        pointDown: '˅',\n    },\n    dataSource: {\n        mainText: (\n            <p>\n                Fonte de dados para o mapa e os gráficos:\n                <a href='https://covid19br.wcota.me/'>Número de casos confirmados de COVID-19 no Brasil</a>\n            </p>\n        )\n    }\n}\n\n","import React, { Component } from 'react';\n//import { getCitiesBrJson } from '../requests/covid'\nimport MapBox from './MapBox'\n//import MyResponsiveLine from './LogPlot'\nimport LoadingBar from 'react-top-loading-bar';\nimport Footer from './Footer'\nimport LinePlot from './LinePlot'\nimport BarPlot from './BarPlot'\nimport MapDataExtractor from '../common/MapDataExtractor'\nimport texts from '../texts/texts'\n\n//import WebWorker from '../worker/WebWorkerSetup'\n//import visibleCitiesWorker from '../worker/visibleCitiesWorker'\n\n\nconst currentScrollPosition = () => {\n    return (window.pageYOffset || document.documentElement.scrollTop)\n}\n\nconst scrollTo = (pos) => {\n    document.documentElement.scrollTop = document.body.scrollTop = pos\n}\n\nconst scrollOffset = (offset) => {\n    scrollTo(currentScrollPosition() + offset)\n}\n\n\nconst ScrollButtons = () => (\n    <div className='scrollButtons'>\n        <div className='scrollButton' onClick={() => { scrollOffset(-500) }}><span>{texts.specialChars.pointUp}</span></div>\n        <div className='scrollButton' onClick={() => { scrollOffset(500) }}><span>{texts.specialChars.pointDown}</span></div>\n    </div>\n)\n\nconst LinePlotWrapper = ({ title, data, colors,\n    stacked = true, className = 'almostFullPage',\n    yScaleType = 'linear' }) => {\n\n    if (data === undefined) {\n        console.error('LinePlotWrapper received undefined as data to plot', title)\n        return (undefined)\n    }\n\n    return (\n        <div>\n            <h3>{title}</h3>\n            <div className={className}>\n                <LinePlot data={data}\n                    colors={colors}\n                    stacked={stacked}\n                    yScaleType={yScaleType} />\n            </div>\n        </div>\n    )\n}\n\nconst BarPlotWrapper = ({title, data, className}) => {\n    return (\n        <div>\n            <h3>{title}</h3>\n            <div className={className}>\n                <BarPlot data={data} />\n            </div>\n        </div>\n        \n    )\n}\n\n\n\nclass MainPage extends Component {\n    constructor(props) {\n        super(props)\n\n        this.timers = []\n        this.plotData = new MapDataExtractor()\n        this.plotData.makeDataset({}, new Date())\n\n        this.state = {\n            covidCasesGeoJson: undefined,\n            covidCasesJson: undefined,\n            loadingBarProgress: 0,\n            //visibleCities: [],\n            visibleCitiesPerDate: {},\n            selectedDate: new Date(),\n            perDayChartData: this.plotData.generateChartData(),\n            perDateChartName: 'COVID-19 em todo o Brasil...'\n        }\n    }\n\n    clearIntervals() {\n        for (let timer of this.timers) {\n            clearInterval(timer)\n        }\n    }\n\n    add(value) {\n        this.setState({\n            loadingBarProgress: this.state.loadingBarProgress + value\n        })\n    }\n\n    complete = () => {\n        this.setState({ loadingBarProgress: 100 })\n        this.clearIntervals()\n    }\n\n    onMapLoadedHandler = () => {\n        this.complete()\n        //this.worker.postMessage('SOMETHING');\n    }\n\n    onLoaderFinished = () => {\n        this.setState({ loadingBarProgress: 0 })\n    }\n\n    infiniteLoad = () => {\n        this.setState({\n            loadingBarProgress: this.state.loadingBarProgress + Math.round(5 + Math.random() * 5)\n        })\n\n        this.timers.push(setInterval(\n            () => {\n                this.setState({\n                    loadingBarProgress: this.state.loadingBarProgress + Math.round(Math.random() * 5)\n                })\n            }, 1200)\n        )\n    }\n\n    updatePlots = (visibleCities, visibleCitiesPerDate) => {\n        this.plotData.makeDataset(visibleCitiesPerDate, this.state.selectedDate)\n\n        this.setState({\n            //visibleCities: visibleCities,\n            visibleCitiesPerDate: visibleCitiesPerDate,\n            perDayChartData: this.plotData.generateChartData(),\n            perDateChartName: this.plotData.makeTitle()\n        })\n    }\n\n    selectedDateChangedHandler = (date) => {\n        this.plotData.makeDataset(this.state.visibleCitiesPerDate, date)\n        this.setState({\n            selectedDate: date,\n            perDayChartData: this.plotData.generateChartData(),\n            perDateChartName: this.plotData.makeTitle()\n        })\n    }\n\n    onMapUpdatingHandler = (isLoading) => {\n        this.setState({ loading: isLoading })\n    }\n\n    render() {\n        return (\n            <div>\n                <LoadingBar\n                    progress={this.state.loadingBarProgress}\n                    height={3}\n                    color='red'\n                    onLoaderFinished={this.onLoaderFinished}\n                />\n                <ScrollButtons />\n\n                <MapBox style={{ right: 0, left: 0, height: '95vh', width: '100%', maxHeight: '1000px' }}\n                    data={this.state.covidCasesGeoJson}\n                    zoom={3} lat={-13.5958} lng={-54.4587}\n                    onSourceLoadBegin={this.infiniteLoad}\n                    onSourceLoadFinished={this.onMapLoadedHandler}\n                    onVisibleCitiesChange={this.updatePlots}\n                    onSelectedDateChanged={this.selectedDateChangedHandler}\n                />\n\n                <div className='nivoCharts'>\n                    <h2>{this.state.perDateChartName}</h2>\n\n                    {texts.aboutSite.presentation}\n                    {texts.aboutSite.youCanDo}\n\n                    <LinePlotWrapper title='Casos e óbitos'\n                        data={[this.state.perDayChartData.deaths, this.state.perDayChartData.cases]}\n                        colors={['#fa4343', '#0068d2']}\n                        stacked={true} />\n\n                    <LinePlotWrapper title='Óbitos' data={[this.state.perDayChartData.deaths]}\n                        colors={['#fa4343']}\n                    />\n\n                    <LinePlotWrapper title='Casos e óbitos em escala logarítmica'\n                        data={[this.plotData.removeZeroes(this.state.perDayChartData.deaths),\n                        this.plotData.removeZeroes(this.state.perDayChartData.cases)]}\n                        colors={['#fa4343', '#0068d2']}\n                        stacked={true}\n                        yScaleType='log10' />\n\n                    <LinePlotWrapper\n                        title='Casos sobre óbitos'\n                        data={[this.state.perDayChartData.deathsOverCases]}\n                        colors={['#e8a838']}\n                    />\n\n                    {/*<BarPlotWrapper\n                            title='Totais'\n                            data={this.state.perDayChartData.casesDeathsPerLocation.perState}\n                    />*/}\n\n                    <h2>Novos casos e óbitos</h2>\n\n                    <LinePlotWrapper\n                        title='Novos casos por dia'\n                        data={[this.state.perDayChartData.newCases]}\n                        colors={['#3841e8']}\n                    />\n\n                    <LinePlotWrapper\n                        title='Novos óbitos por dia'\n                        data={[this.state.perDayChartData.newDeaths]}\n                        colors={['#e85e38']}\n                    />\n\n                    <h2>Fator de crescimento</h2>\n\n                    {texts.growthFactor.mainExplanation}\n                    {texts.growthFactor.parameters}\n                    {texts.growthFactor.about}\n\n                    <LinePlotWrapper title='Fator de crescimento - casos' data={[this.plotData.casesGrowthFactorPlotData]}\n                        colors={['#00d3eb']}\n                    />\n\n                    <LinePlotWrapper title='Fator de crescimento - óbitos' data={[this.plotData.deathsGrowthRateData]}\n                        colors={['#ff6a7f']}\n                    />\n\n                    <LinePlotWrapper title='Fator de crescimento - casos e óbitos' data={[this.plotData.deathsGrowthRateData, this.plotData.casesGrowthFactorPlotData]}\n                        colors={['#ff6a7f', '#00d3eb']}\n                        yScaleType='linearMinusOnePlusOne'\n                    />\n\n                </div>\n                <div style={{ marginLeft: 50, marginRight: 50 }}>\n                    <hr />\n                    {texts.dataSource.mainText}\n                </div>\n                <Footer />\n            </div>\n        );\n    }\n\n    componentDidMount() {\n        //this.worker = new WebWorker(visibleCitiesWorker)\n\n        /*this.worker.addEventListener('message', function(e) {\n            console.log('Message from Worker: ' + e.data)\n        })*/\n\n    }\n\n    componentWillUnmount() {\n        this.clearIntervals()\n    }\n}\n\nexport default MainPage;\n","import React from 'react';\nimport './App.css';\nimport MainPage from './components/MainPage'\nimport {NotificationContainer} from 'react-notifications';\nimport 'react-notifications/lib/notifications.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NotificationContainer>\n      </NotificationContainer>\n        <MainPage />\n    </div>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}