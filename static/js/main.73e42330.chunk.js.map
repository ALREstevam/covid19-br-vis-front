{"version":3,"sources":["requests/covid.js","common/date.js","components/CityDataItem.js","components/MapBox.js","components/LogPlot.js","components/MainPage.js","App.js","serviceWorker.js","index.js"],"names":["get","url","onSuccess","onFail","parser","a","fetch","then","res","json","data","catch","console","error","daysBetween","d0","d1","Math","round","abs","formatDate","date","month","getMonth","day","getDate","year","getFullYear","length","join","styles","container","lineHeight","marginBottom","lastUpdate","color","fontSize","cityName","dataValue","CityDataItem","name","state","cases","deaths","style","mapboxgl","accessToken","CitiesList","cities","className","sort","b","totalCases","reverse","map","city","Date","key","MapBox","props","initialDate","lng","lat","zoom","sliderValue","visibleCities","animate","maxDays","mapType","this","features","queryRenderedFeatures","layers","cityData","feature","properties","hasOwnProperty","timestamp","getTime","Object","keys","changeSlider","animateTimeout","setInterval","setTimeout","clearInterval","value","days","dayNum","parseInt","newDate","valueOf","setDate","setState","getVisibleOnMap","setFilter","event","target","setLayoutProperty","checked","animatedStep","containerStyle","href","hour","type","onChange","e","handleAnimateChange","min","max","step","handleMapTypeChange","ref","el","mapContainer","Map","center","on","getCenter","toFixed","getZoom","addSource","addLayer","Component","sample2","MyResponsiveLine","log","margin","top","right","bottom","left","xScale","base","yScale","stacked","axisTop","axisRight","axisBottom","orient","tickSize","tickPadding","tickRotation","legend","legendOffset","legendPosition","axisLeft","colors","scheme","pointSize","pointColor","theme","pointBorderWidth","pointBorderColor","from","pointLabel","pointLabelYOffset","useMesh","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","itemBackground","MainPage","covidCasesGeoJson","undefined","covidCasesJson","height","width","backgroundColor","getCitiesBrJson","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.73e42330.chunk.js","sourcesContent":["export async function get(url, onSuccess, onFail, parser){\n    fetch(url)\n        .then(res => res.json())\n        .then((data) => onSuccess(parser(data)))\n        .catch((data)=>{\n            console.error(data)\n            onFail && onFail(data)\n        })\n}\n\n\nexport async function getCitiesBrJson(onSuccess, onFail, parser=(data)=>data){\n    const url = 'http://127.0.0.1:5000/br/cities?response_type=json'\n    return get(url, onSuccess, onFail, parser)\n}\n\nexport async function getCitiesBrGeoJson(onSuccess, onFail, parser=(data)=>data){\n    const url = 'http://localhost:5000/br/cities?response_type=geojson'\n    return get(url, onSuccess, onFail, parser)\n} \n\n","export const ONE_DAY = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds\n\nexport function daysBetween(d0, d1) {\n    return Math.round(Math.abs((d0 - d1) / ONE_DAY));\n}\n\nexport function formatDate(date) {\n    let month = '' + (date.getMonth() + 1)\n    let day = '' + date.getDate()\n    let year = date.getFullYear()\n\n    if (month.length < 2) {\n        month = '0' + month;\n    }\n    if (day.length < 2) {\n        day = '0' + day;\n    }\n\n    return [day, month, year].join('/');\n}\n\nexport function addDays(date, days) {\n    var date = new Date(date.valueOf());\n    date.setDate(date.getDate() + days);\n    return date;\n}\n\nexport function toTimestamp(strDate){\n    var datum = Date.parse(strDate);\n    return datum/1000;\n }","import React from 'react';\nimport { formatDate, daysBetween, addDays } from '../common/date'\n\nconst CityDataItem = ({ name, state, date, cases, deaths }) => {\n    return (\n        <div style={styles.container}>\n            <span style={styles.lastUpdate}>Última atualização {formatDate(date)}</span><br />\n            <span style={styles.cityName}><b>{name}/{state}</b></span><br />\n            <span style={styles.dataValue}><b>Casos:</b> {cases}</span><br />\n            <span style={styles.dataValue}><b>Óbitos:</b> {deaths}</span>\n        </div>)\n};\n\nconst styles = {\n    container: {\n        lineHeight: '1em',\n        marginBottom: '15px'\n    },\n    lastUpdate: {\n        color: '#949494',\n        fontSize: '.6em'\n    },\n    cityName: {\n        fontSize: '1em'\n    },\n    dataValue: {\n        color: '#3b3b3b',\n        fontSize: '.9em'\n    }\n}\n\nexport default CityDataItem","import React, { Component } from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport { formatDate, daysBetween, addDays } from '../common/date'\nimport CityDataItem from './CityDataItem'\n\nmapboxgl.accessToken = 'pk.eyJ1IjoiYWVzdCIsImEiOiJjazkyNzZka2gwMnloM2xuNzZiMzEyODFrIn0.Yvk6wdCcwxvAB99OScpc2Q';\n\nconst CitiesList = ({ cities }) => {\n    return (\n        cities.length ?\n            <div className='cityList'>{cities\n                .sort((a, b) => a.totalCases - b.totalCases)\n                .reverse()\n                .map(data => (<CityDataItem\n                    name={data.city}\n                    state={data.state}\n                    date={new Date(data.date)}\n                    cases={data.totalCases}\n                    deaths={data.deaths}\n                    key={'cityItem' + data.city + data.state}\n                />\n                ))\n            }</div> :\n            <p>(Zoom para mais detalhes)</p>\n    )\n}\n\nclass MapBox extends Component {\n    constructor(props) {\n        super(props);\n\n        let initialDate = new Date('2020-02-25')\n\n        this.state = {\n            lng: props.lng || 5,\n            lat: props.lat || 34,\n            zoom: props.zoom || 2,\n            date: new Date(),\n            sliderValue: daysBetween(new Date('2020-02-25'), new Date()),\n            data: this.props.data,\n            visibleCities: [],\n            animate: false,\n            initialDate: initialDate,\n            maxDays: daysBetween(initialDate, new Date()),\n            mapType: 'infected',\n        };\n    }\n\n    getVisibleOnMap() {\n        if (this.state.zoom < 5) {\n            return []\n        }\n        let features = this.state.map.queryRenderedFeatures({ layers: ['all-cities'] });\n        let cityData = {}\n\n        if (features) {\n            features = features.sort((a, b) => new Date(a.date) - new Date(b.date))\n\n            for (let feature of features) {\n                let city = feature.properties.city\n\n                if (city === 'INDEFINIDA') {\n                    city = city + '/' + feature.properties.state\n                }\n\n                if (!cityData.hasOwnProperty(city) && feature.properties.timestamp <= this.state.date.getTime()) {\n                    cityData[city] = feature.properties\n                }\n            }\n            return Object.keys(cityData).map(key => cityData[key]);\n        }\n        return []\n    }\n\n    animatedStep() {\n        if (this.state.animate) {\n            this.changeSlider(0)\n\n            this.animateTimeout = setInterval(() => {\n                if (this.state.sliderValue <= this.state.maxDays) {\n                    this.changeSlider(this.state.sliderValue + 1)\n                }\n                if (this.state.sliderValue === this.state.maxDays) {\n                    setTimeout(()=>{\n                        this.changeSlider(0)\n                    }, 2000)\n                }\n            }, 400);\n\n\n\n        }\n        else if (this.animateTimeout) {\n            clearInterval(this.animateTimeout);\n        }\n\n    }\n\n    changeSlider(value) {\n        let dayNum = parseInt(value)\n        let newDate = addDays(this.state.initialDate, dayNum)\n        this.setState({\n            sliderValue: dayNum,\n            date: newDate,\n            visibleCities: this.getVisibleOnMap()\n        })\n        this.state.map.setFilter('covid-heatmap', ['<=', ['number', ['get', 'timestamp']], newDate.getTime()])\n        this.state.map.setFilter('covid-heatmap-death', ['<=', ['number', ['get', 'timestamp']], newDate.getTime()])\n        this.state.map.setFilter('covid-point', ['==', ['number', ['get', 'timestamp']], newDate.getTime()])\n    }\n\n    handleMapTypeChange(event) {\n        this.setState({\n            mapType: event.target.value\n        })\n\n        let layers = {\n            death: 'covid-heatmap-death',\n            infected: 'covid-heatmap'\n        }\n\n        if (event.target.value === 'infected') {\n            this.state.map.setLayoutProperty(layers.infected, 'visibility', 'visible')\n            this.state.map.setLayoutProperty(layers.death, 'visibility', 'none')\n        } else {\n            this.state.map.setLayoutProperty(layers.infected, 'visibility', 'none')\n            this.state.map.setLayoutProperty(layers.death, 'visibility', 'visible')\n        }\n    }\n\n    handleAnimateChange(event){\n        this.setState({ animate: event.target.checked }, () => {\n            this.animatedStep()\n        })\n    }\n\n    render() {\n        return (\n            <div style={this.props.containerStyle}>\n                <div className='console'>\n                    <h1>Casos de COVID-19 no Brasil até o dia {formatDate(this.state.date)} (há {daysBetween(this.state.date, new Date())} dias)</h1>\n                    <p>Fonte de dados: <a href='https://covid19br.wcota.me/'>Número de casos confirmados de COVID-19 no Brasil</a></p>\n                    <div className='session sliderbar'>\n                        <h2>Data {formatDate(this.state.date)}: <label className='active-hour'>{this.state.hour}</label></h2>\n                        <form>\n                            <label>\n                                <input name=\"animate\" type=\"checkbox\" checked={this.state.animate}\n                                    onChange={(e) => this.handleAnimateChange(e)}\n                                />\n                                Animar\n                            </label>\n                        </form>\n                        <input className='slider row' type='range' min='0' max={this.state.maxDays} step='1' value={this.state.sliderValue}\n                            onChange={(e) => this.changeSlider(e.target.value)}\n                        />\n                    </div>\n                    <form>\n                        <label>\n                            <input type=\"radio\" value=\"infected\" checked={this.state.mapType === 'infected'}\n                                onChange={(e) => this.handleMapTypeChange(e)} />\n                            Casos\n                       </label>\n                        <span> | </span>\n                        <label>\n                            <input type=\"radio\" value=\"death\" checked={this.state.mapType === 'death'}\n                                onChange={(e) => this.handleMapTypeChange(e)} />\n                            Óbitos\n                      </label>\n                    </form>\n                    <div>\n\n                    </div>\n                    <div>\n                        <CitiesList cities={this.state.visibleCities} />\n                    </div>\n                </div>\n                <div style={this.props.style} ref={el => this.mapContainer = el} />\n            </div>\n        )\n    }\n\n    componentDidMount() {\n        const map = new mapboxgl.Map({\n            container: this.mapContainer,\n            style: 'mapbox://styles/aest/ck93dlpxn00v21imgp8zz3y6x',\n            center: [this.state.lng, this.state.lat],\n            zoom: this.state.zoom\n        })\n\n        this.setState({\n            map: map\n        })\n\n        map.on('move', () => {\n            this.setState({\n                lng: map.getCenter().lng.toFixed(4),\n                lat: map.getCenter().lat.toFixed(4),\n                zoom: map.getZoom().toFixed(2)\n            });\n        });\n\n        map.on('load', () => {\n\n            map.addSource('covid', {\n                'type': 'geojson',\n                'data': 'http://localhost:5000/br/cities?response_type=geojson'\n            })\n\n            map.addSource('covid-cities-daily', {\n                'type': 'geojson',\n                'data': 'http://localhost:5000/br/cities-daily?response_type=geojson'\n            })\n\n            map.on('moveend', () => {\n                this.setState({\n                    visibleCities: this.getVisibleOnMap()\n                })\n            });\n\n            map.addLayer({\n                'id': 'covid-heatmap-death',\n                'type': 'heatmap',\n                'source': 'covid',\n                'visibility': 'none',\n                'paint': {\n                    // Increase the heatmap weight based on frequency and property magnitude\n                    'heatmap-weight': [\n                        'interpolate', ['linear'], ['number', ['get', 'newDeaths']], 0, 0, 20, 1\n                    ],\n                    // Increase the heatmap color weight weight by zoom level\n                    // heatmap-intensity is a multiplier on top of heatmap-weight\n                    'heatmap-intensity': [\n                        'interpolate', ['linear'], ['zoom'], 0, 1, 9, 3\n                    ],\n                    // Color ramp for heatmap.  Domain is 0 (low) to 1 (high).\n                    // Begin color ramp at 0-stop with a 0-transparancy color\n                    // to create a blur-like effect.\n                    'heatmap-color': [\n                        'interpolate', ['linear'], ['heatmap-density'],\n                        0, 'rgba(255,237,68,0)', \n                        0.1, '#ff9671',\n                        0.15, '#ffc75f',\n                        0.2, '#e24f4f',\n                        0.4, '#c02f36', \n                        0.6, '#9e001f', \n                        0.8, '#7d0006', \n                        1, '#5e0000'\n                    ],\n                    // Adjust the heatmap radius by zoom level\n                    'heatmap-radius': [\n                        'interpolate', ['linear'], ['zoom'], 0, 2, 9, 20\n                    ],\n                    // Transition from heatmap to circle layer by zoom level\n                    'heatmap-opacity': ['interpolate', ['linear'], ['zoom'], 7, 1, 15, 0]\n                },\n                //filter: ['<=', ['number', ['get', 'timestamp']], this.state.date]\n            },\n                'waterway-label'\n            );\n\n            map.addLayer({\n                'id': 'covid-heatmap',\n                'type': 'heatmap',\n                'source': 'covid',\n                'paint': {\n                    // Increase the heatmap weight based on frequency and property magnitude\n                    'heatmap-weight': [\n                        'interpolate', ['linear'], ['number', ['get', 'newCases']], 0, 0, 20, 1\n                    ],\n                    // Increase the heatmap color weight weight by zoom level\n                    // heatmap-intensity is a multiplier on top of heatmap-weight\n                    'heatmap-intensity': [\n                        'interpolate', ['linear'], ['zoom'], 0, 1, 9, 3\n                    ],\n                    // Color ramp for heatmap.  Domain is 0 (low) to 1 (high).\n                    // Begin color ramp at 0-stop with a 0-transparancy color\n                    // to create a blur-like effect.\n                    'heatmap-color': [\n                        'interpolate', ['linear'], ['heatmap-density'],\n                        0, 'rgba(255,237,68,0)', 0.05, 'rgb(72,244,66)', 0.15, 'rgb(68,102,237)',\n                        0.4, 'rgb(249,169,0)', 0.6, 'rgb(255,52,45)', 0.8, 'rgb(233,3,8)', 1, 'rgb(199,5,9)'\n                    ],\n                    // Adjust the heatmap radius by zoom level\n                    'heatmap-radius': [\n                        'interpolate', ['linear'], ['zoom'], 0, 2, 9, 20\n                    ],\n                    // Transition from heatmap to circle layer by zoom level\n                    'heatmap-opacity': ['interpolate', ['linear'], ['zoom'], 7, 1, 15, 0]\n                },\n                //filter: ['<=', ['number', ['get', 'timestamp']], this.state.date]\n            },\n                'waterway-label'\n            );\n\n\n            map.addLayer({\n                'id': 'covid-point',\n                'type': 'circle',\n                'source': 'covid-cities-daily',\n                'minzoom': 8,\n                'paint': {\n                    // Size circle radius by earthquake magnitude and zoom level\n                    'circle-radius': [\n                        'interpolate', ['linear'], ['zoom'],\n                        7,\n                        ['interpolate', ['linear'], ['number', ['get', 'totalCases']], 1, 1, 6, 4],\n                        16,\n                        ['interpolate', ['linear'], ['number', ['get', 'totalCases']], 1, 5, 6, 50]\n                    ],\n                    // Color circle by earthquake magnitude\n                    'circle-color': [\n                        'interpolate', ['linear'], ['number', ['get', 'totalCases']],\n                        1, 'rgba(33,102,172,0)', 2, 'rgb(178,24,43)'\n                    ],\n                    'circle-stroke-color': 'white', 'circle-stroke-width': 1,\n                    'circle-opacity': ['interpolate', ['linear'], ['zoom'], 7, 0, 8, 1]\n                },\n                //filter: ['==', ['number', ['get', 'timestamp']], this.state.date],\n            },\n                'waterway-label'\n            );\n\n            map.addLayer({\n                'id': 'all-cities',\n                'type': 'circle',\n                'source': 'covid',\n                'minzoom': 5,\n                'paint': {\n                    'circle-color': [\n                        'interpolate', ['linear'], ['number', ['get', 'totalCases']],\n                        1, 'rgba(33,102,172,0)',\n                    ],\n                    'circle-stroke-color': 'white', 'circle-stroke-width': 0,\n                },\n            },\n                'waterway-label'\n            );\n            // Transition from heatmap to circle layer by zoom level\n            /*map.addLayer({\n                id: 'collisions',\n                type: 'circle',\n                source: 'car',\n                paint: {\n                    'circle-radius': [\n                        'interpolate',\n                        ['linear'],\n                        ['number', ['get', 'newCases']],\n                        0, 4,\n                        5, 24\n                    ],\n                    'circle-color': [\n                        'interpolate',\n                        ['linear'],\n                        ['number', ['get', 'newCases']],\n                        0, '#2DC4B2',\n                        1, '#3BB3C3',\n                        2, '#669EC4',\n                        3, '#8B88B6',\n                        4, '#A2719B',\n                        5, '#AA5E79'\n                    ],\n                    'circle-opacity': 0.8\n                },\n                //filter: ['==', ['number', ['get', 'Hour']], 12]\n            });*/\n        });\n\n        //\n        /*map.on('load', function () {\n            // Add a geojson point source.\n            // Heatmap layers also work with a vector tile source.\n        }*/\n    }\n}\n\nexport default MapBox;","import React, { Component } from 'react';\nimport { ResponsiveLine } from '@nivo/line'\n\nconst sample = [\n    {\n      \"id\": \"japan\",\n      \"color\": \"hsl(258, 70%, 50%)\",\n      \"data\": [\n        {\n          \"x\": \"plane\",\n          \"y\": 247\n        },\n        {\n          \"x\": \"helicopter\",\n          \"y\": 90\n        },\n        {\n          \"x\": \"boat\",\n          \"y\": 45\n        },\n        {\n          \"x\": \"train\",\n          \"y\": 155\n        },\n        {\n          \"x\": \"subway\",\n          \"y\": 270\n        },\n        {\n          \"x\": \"bus\",\n          \"y\": 263\n        },\n        {\n          \"x\": \"car\",\n          \"y\": 8\n        },\n        {\n          \"x\": \"moto\",\n          \"y\": 49\n        },\n        {\n          \"x\": \"bicycle\",\n          \"y\": 64\n        },\n        {\n          \"x\": \"horse\",\n          \"y\": 91\n        },\n        {\n          \"x\": \"skateboard\",\n          \"y\": 34\n        },\n        {\n          \"x\": \"others\",\n          \"y\": 196\n        }\n      ]\n    },\n    {\n      \"id\": \"france\",\n      \"color\": \"hsl(331, 70%, 50%)\",\n      \"data\": [\n        {\n          \"x\": \"plane\",\n          \"y\": 73\n        },\n        {\n          \"x\": \"helicopter\",\n          \"y\": 54\n        },\n        {\n          \"x\": \"boat\",\n          \"y\": 124\n        },\n        {\n          \"x\": \"train\",\n          \"y\": 120\n        },\n        {\n          \"x\": \"subway\",\n          \"y\": 93\n        },\n        {\n          \"x\": \"bus\",\n          \"y\": 69\n        },\n        {\n          \"x\": \"car\",\n          \"y\": 278\n        },\n        {\n          \"x\": \"moto\",\n          \"y\": 173\n        },\n        {\n          \"x\": \"bicycle\",\n          \"y\": 160\n        },\n        {\n          \"x\": \"horse\",\n          \"y\": 61\n        },\n        {\n          \"x\": \"skateboard\",\n          \"y\": 277\n        },\n        {\n          \"x\": \"others\",\n          \"y\": 209\n        }\n      ]\n    },\n    {\n      \"id\": \"us\",\n      \"color\": \"hsl(345, 70%, 50%)\",\n      \"data\": [\n        {\n          \"x\": \"plane\",\n          \"y\": 234\n        },\n        {\n          \"x\": \"helicopter\",\n          \"y\": 265\n        },\n        {\n          \"x\": \"boat\",\n          \"y\": 90\n        },\n        {\n          \"x\": \"train\",\n          \"y\": 243\n        },\n        {\n          \"x\": \"subway\",\n          \"y\": 75\n        },\n        {\n          \"x\": \"bus\",\n          \"y\": 250\n        },\n        {\n          \"x\": \"car\",\n          \"y\": 299\n        },\n        {\n          \"x\": \"moto\",\n          \"y\": 173\n        },\n        {\n          \"x\": \"bicycle\",\n          \"y\": 211\n        },\n        {\n          \"x\": \"horse\",\n          \"y\": 50\n        },\n        {\n          \"x\": \"skateboard\",\n          \"y\": 247\n        },\n        {\n          \"x\": \"others\",\n          \"y\": 269\n        }\n      ]\n    },\n    {\n      \"id\": \"germany\",\n      \"color\": \"hsl(306, 70%, 50%)\",\n      \"data\": [\n        {\n          \"x\": \"plane\",\n          \"y\": 248\n        },\n        {\n          \"x\": \"helicopter\",\n          \"y\": 49\n        },\n        {\n          \"x\": \"boat\",\n          \"y\": 14\n        },\n        {\n          \"x\": \"train\",\n          \"y\": 252\n        },\n        {\n          \"x\": \"subway\",\n          \"y\": 188\n        },\n        {\n          \"x\": \"bus\",\n          \"y\": 111\n        },\n        {\n          \"x\": \"car\",\n          \"y\": 117\n        },\n        {\n          \"x\": \"moto\",\n          \"y\": 133\n        },\n        {\n          \"x\": \"bicycle\",\n          \"y\": 246\n        },\n        {\n          \"x\": \"horse\",\n          \"y\": 44\n        },\n        {\n          \"x\": \"skateboard\",\n          \"y\": 120\n        },\n        {\n          \"x\": \"others\",\n          \"y\": 197\n        }\n      ]\n    },\n    {\n      \"id\": \"norway\",\n      \"color\": \"hsl(209, 70%, 50%)\",\n      \"data\": [\n        {\n          \"x\": \"plane\",\n          \"y\": 222\n        },\n        {\n          \"x\": \"helicopter\",\n          \"y\": 76\n        },\n        {\n          \"x\": \"boat\",\n          \"y\": 92\n        },\n        {\n          \"x\": \"train\",\n          \"y\": 270\n        },\n        {\n          \"x\": \"subway\",\n          \"y\": 88\n        },\n        {\n          \"x\": \"bus\",\n          \"y\": 23\n        },\n        {\n          \"x\": \"car\",\n          \"y\": 232\n        },\n        {\n          \"x\": \"moto\",\n          \"y\": 133\n        },\n        {\n          \"x\": \"bicycle\",\n          \"y\": 27\n        },\n        {\n          \"x\": \"horse\",\n          \"y\": 180\n        },\n        {\n          \"x\": \"skateboard\",\n          \"y\": 229\n        },\n        {\n          \"x\": \"others\",\n          \"y\": 215\n        }\n      ]\n    }\n  ]\n\nlet sample2 = [\n    {\n        \"id\": \"japan\",\n        \"color\": \"hsl(258, 70%, 50%)\",\n        \"data\": [\n          {\n            \"x\": 2,\n            \"y\": 247\n          },\n          {\n            \"x\": 3,\n            \"y\": 90\n          },\n          {\n            \"x\": 4,\n            \"y\": 45\n          },\n          {\n            \"x\": 4.3,\n            \"y\": 155\n          },\n          {\n            \"x\": 5,\n            \"y\": 270\n          },\n          {\n            \"x\": 6,\n            \"y\": 263\n          },\n          {\n            \"x\": 7,\n            \"y\": 8\n          },\n          {\n            \"x\": 8,\n            \"y\": 49\n          },\n          {\n            \"x\": 9,\n            \"y\": 64\n          },\n          {\n            \"x\": 10,\n            \"y\": 91\n          },\n          {\n            \"x\": 11,\n            \"y\": 34\n          },\n          {\n            \"x\": 12,\n            \"y\": 196\n          }\n        ]\n      },\n]\n\n\nconst MyResponsiveLine = ({ data /* see data tab */ }) => {\n    console.log('MyResponsiveLine')\n    return (\n    <ResponsiveLine\n        data={data || sample2}\n        margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\n        //xScale={{ type: 'point' }}\n        xScale={{\n            type: 'log',\n            base: 2,\n            max: 'auto',\n        }}\n        yScale={{ type: 'linear', min: 'auto', max: 'auto', stacked: true, reverse: false }}\n        axisTop={null}\n        axisRight={null}\n        axisBottom={{\n            orient: 'bottom',\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            legend: 'transportation',\n            legendOffset: 36,\n            legendPosition: 'middle'\n        }}\n        axisLeft={{\n            orient: 'left',\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            legend: 'count',\n            legendOffset: -40,\n            legendPosition: 'middle'\n        }}\n        colors={{ scheme: 'nivo' }}\n        pointSize={10}\n        pointColor={{ theme: 'background' }}\n        pointBorderWidth={2}\n        pointBorderColor={{ from: 'serieColor' }}\n        pointLabel=\"y\"\n        pointLabelYOffset={-12}\n        useMesh={true}\n        legends={[\n            {\n                anchor: 'bottom-right',\n                direction: 'column',\n                justify: false,\n                translateX: 100,\n                translateY: 0,\n                itemsSpacing: 0,\n                itemDirection: 'left-to-right',\n                itemWidth: 80,\n                itemHeight: 20,\n                itemOpacity: 0.75,\n                symbolSize: 12,\n                symbolShape: 'circle',\n                symbolBorderColor: 'rgba(0, 0, 0, .5)',\n                effects: [\n                    {\n                        on: 'hover',\n                        style: {\n                            itemBackground: 'rgba(0, 0, 0, .03)',\n                            itemOpacity: 1\n                        }\n                    }\n                ]\n            }\n        ]}\n    />\n)}\n\nexport default MyResponsiveLine","import React, { Component } from 'react';\nimport { getCitiesBrJson, getCitiesBrGeoJson } from '../requests/covid'\nimport MapBox from './MapBox'\nimport MyResponsiveLine from './LogPlot'\n\nclass MainPage extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            covidCasesGeoJson: undefined,\n            covidCasesJson: undefined,\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <MapBox style={{ right: 0, left: 0, height:'95vh', width: '100%'}}\n                    data={this.state.covidCasesGeoJson}\n                    zoom={3} lat={-13.5958} lng={-54.4587}/>\n                <div style={{ width: '100%', height: '100vh', backgroundColor: 'red' }}>\n                    <MyResponsiveLine />\n                </div>\n            </div>\n        );\n    }\n\n    componentDidMount() {\n        getCitiesBrJson(\n            (data) => {\n                console.log(data)\n                this.setState({ covidCasesJson: data })\n            },\n            console.error,\n        )\n    }\n}\n\nexport default MainPage;\n","import React from 'react';\nimport './App.css';\nimport MainPage from './components/MainPage'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <MainPage/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}