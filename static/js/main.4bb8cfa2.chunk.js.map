{"version":3,"sources":["env/envVars.js","requests/covid.js","common/date.js","components/CityDataItem.js","components/MapBox.js","components/MainPage.js","App.js","serviceWorker.js","index.js"],"names":["require","env","MAPBOX_ACCESS_TOKEN","process","BACKEND_URL","MAPBOX_ACCESS_TOKEN_LIST","str","sep","split","read_list","get","url","onSuccess","onFail","parser","a","fetch","mode","then","res","json","data","catch","console","error","daysBetween","d0","d1","Math","round","abs","formatDate","date","month","getMonth","day","getDate","year","getFullYear","length","join","styles","lastUpdate","color","fontSize","cityName","dataValue","CityDataItem","name","state","cases","deaths","className","style","mapboxgl","accessToken","MapBox","props","renderCityListItem","index","key","renderableCities","city","Date","totalCases","initialDate","baseUrl","onSourceLoadBegin","onSourceLoadFinished","lng","lat","zoom","sliderValue","visibleCities","animate","maxDays","mapType","features","this","map","queryRenderedFeatures","layers","cityData","sort","b","feature","properties","hasOwnProperty","timestamp","getTime","Object","keys","update","getVisibleOnMap","undefined","setState","reverse","changeSlider","animateTimeout","setInterval","setTimeout","clearInterval","value","dayNum","parseInt","newDate","days","dt","valueOf","setDate","addDays","updateVisibleCities","setFilter","event","target","setLayoutProperty","checked","animatedStep","containerStyle","daysAgo","daysAgoStringMaker","href","hour","type","onChange","e","handleAnimateChange","min","max","step","handleMapTypeChange","itemRenderer","pageSize","ref","el","mapContainer","Map","container","center","minPitch","maxPitch","pitchWithRotate","logoPosition","on","getCenter","toFixed","getZoom","addSource","addLayer","Component","MainPage","complete","loadingBarProgress","clearIntervals","onLoaderFinished","infiniteLoad","random","timers","push","covidCasesGeoJson","covidCasesJson","timer","progress","height","right","left","width","getCitiesBrJson","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.4bb8cfa2.chunk.js","sourcesContent":["require('dotenv/config');\n\nexport function read_list(str, sep=','){\n    if(str){\n        return str.split(sep)\n    }\n}\n\n\nconst env = {\n    MAPBOX_ACCESS_TOKEN : process.env.REACT_APP_MAPBOX_ACCESS_TOKEN,\n    BACKEND_URL: process.env.REACT_APP_BACKEND_URL || 'http://localhost:3000',\n    MAPBOX_ACCESS_TOKEN_LIST: read_list(process.env.MAPBOX_ACCESS_TOKEN_LIST),\n}\n\n\n\n\nexport default env","import env from '../env/envVars'\n\nexport async function get(url, onSuccess, onFail, parser){\n    fetch(url, {mode: 'cors'})\n        .then(res => res.json())\n        .then((data) => onSuccess(parser(data)))\n        .catch((data)=>{\n            console.error(data)\n            onFail && onFail(data)\n        })\n}\n\n\nexport async function getCitiesBrJson(onSuccess, onFail, parser=(data)=>data){\n    const url = `${env.BACKEND_URL}/br/cities?response_type=json`\n    return get(url, onSuccess, onFail, parser)\n}\n\nexport async function getCitiesBrGeoJson(onSuccess, onFail, parser=(data)=>data){\n    const url = `${env.BACKEND_URL}/br/cities?response_type=geojson`\n    return get(url, onSuccess, onFail, parser)\n} \n\n","export const ONE_DAY = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds\n\nexport function daysBetween(d0, d1) {\n    return Math.round(Math.abs((d0 - d1) / ONE_DAY));\n}\n\nexport function formatDate(date) {\n    let month = '' + (date.getMonth() + 1)\n    let day = '' + date.getDate()\n    let year = date.getFullYear()\n\n    if (month.length < 2) {\n        month = '0' + month;\n    }\n    if (day.length < 2) {\n        day = '0' + day;\n    }\n\n    return [day, month, year].join('/');\n}\n\nexport function addDays(date, days) {\n    var dt = new Date(date.valueOf());\n    dt.setDate(dt.getDate() + days);\n    return dt;\n}\n\nexport function toTimestamp(strDate){\n    var datum = Date.parse(strDate);\n    return datum/1000;\n }","import React from 'react';\nimport { formatDate } from '../common/date'\n\nconst CityDataItem = ({ name, state, date, cases, deaths }) => {\n    return (\n        <div className='cityListItem'>\n            <span style={styles.lastUpdate}>Última atualização {formatDate(date)}</span><br />\n            <span style={styles.cityName}><b>{name}/{state}</b></span><br />\n            <span style={styles.dataValue}><b>Casos:</b> {cases}</span><br />\n            <span style={styles.dataValue}><b>Óbitos:</b> {deaths}</span>\n        </div>)\n};\n\nconst styles = {\n    lastUpdate: {\n        color: '#949494',\n        fontSize: '.6em'\n    },\n    cityName: {\n        fontSize: '1em'\n    },\n    dataValue: {\n        color: '#3b3b3b',\n        fontSize: '.9em'\n    }\n}\n\nexport default CityDataItem","import React, { Component } from 'react';\nimport mapboxgl from 'mapbox-gl'\nimport ReactList from 'react-list'\nimport { formatDate, daysBetween, addDays } from '../common/date'\nimport CityDataItem from './CityDataItem'\nimport env from '../env/envVars'\n\nmapboxgl.accessToken = env.MAPBOX_ACCESS_TOKEN\n\n/*\nconst CitiesList = ({ cities }) => {\n    return (\n        cities.length ?\n             :\n            <p>(Zoom para mais detalhes)</p>\n    )\n}\n\n*/\n\nclass MapBox extends Component {\n    constructor(props) {\n        super(props);\n\n        let initialDate = new Date('2020-02-25')\n\n        this.baseUrl = env.BACKEND_URL\n\n        this.onSourceLoadBegin = this.props.onSourceLoadBegin\n        this.onSourceLoadFinished = this.props.onSourceLoadFinished\n\n        this.state = {\n            lng: props.lng || 5,\n            lat: props.lat || 34,\n            zoom: props.zoom || 2,\n            date: new Date(),\n            sliderValue: daysBetween(new Date('2020-02-25'), new Date()),\n            data: this.props.data,\n            visibleCities: [],\n            renderableCities: [],\n            animate: false,\n            initialDate: initialDate,\n            maxDays: daysBetween(initialDate, new Date()),\n            mapType: 'infected',\n        };\n    }\n\n\n    renderCityListItem = (index, key) => {\n        const data = this.state.renderableCities[index]\n\n        return <CityDataItem\n            name={data.city}\n            state={data.state}\n            date={new Date(data.date)}\n            cases={data.totalCases}\n            deaths={data.deaths}\n            key={key}\n        />\n\n    }\n\n    getVisibleOnMap() {\n\n        let features = this.state.map.queryRenderedFeatures({ layers: ['all-cities'] });\n        let cityData = {}\n\n\n        if (features) {\n            features = features.sort((a, b) => new Date(a.date) - new Date(b.date))\n                .map(feature => feature.properties)\n            /*.map(data => {\n                return {\n                    ...data,\n                    city: data.city === 'INDEFINIDA' ? `INDEFINIDA/${data.state}` : data.city,\n                }\n            })*/\n\n            //features = features.sort((a, b) => new Date(a.date) - new Date(b.date))\n\n            for (let feature of features) {\n                let city = feature.city\n\n                /*if (city === 'INDEFINIDA') {\n                    city = city + '/' + feature.properties.state\n                }*/\n\n                if (!cityData.hasOwnProperty(city) && feature.timestamp <= this.state.date.getTime()) {\n                    cityData[city] = feature\n                }\n            }\n            return Object.keys(cityData).map(key => cityData[key]);\n        }\n        return []\n    }\n\n    updateVisibleCities() {\n        if (this.state.zoom > 5) {\n            let update = this.getVisibleOnMap()\n            if (update !== undefined) {\n                this.setState({\n                    visibleCities: update,\n                    renderableCities: update.sort((a, b) => a.totalCases - b.totalCases).reverse()\n                })\n            }\n        }\n        else {\n            this.setState({\n                visibleCities: [],\n                renderableCities: []\n            })\n        }\n    }\n\n    animatedStep() {\n        if (this.state.animate) {\n            this.changeSlider(0)\n\n            this.animateTimeout = setInterval(() => {\n                if (this.state.sliderValue <= this.state.maxDays) {\n                    this.changeSlider(this.state.sliderValue + 1)\n                }\n                else {\n                    setTimeout(() => {\n                        this.changeSlider(0)\n                    }, 2000)\n                }\n            }, 400);\n        }\n        else if (this.animateTimeout) {\n            clearInterval(this.animateTimeout);\n        }\n\n    }\n\n    changeSlider(value) {\n        let dayNum = parseInt(value)\n        let newDate = addDays(this.state.initialDate, dayNum)\n        this.setState({\n            sliderValue: dayNum,\n            date: newDate,\n        })\n\n        this.updateVisibleCities()\n\n        this.state.map.setFilter('covid-heatmap', ['<=', ['number', ['get', 'timestamp']], newDate.getTime()])\n        this.state.map.setFilter('covid-heatmap-death', ['<=', ['number', ['get', 'timestamp']], newDate.getTime()])\n        this.state.map.setFilter('covid-point', ['==', ['number', ['get', 'timestamp']], newDate.getTime()])\n    }\n\n    handleMapTypeChange(event) {\n        this.setState({\n            mapType: event.target.value\n        })\n\n        let layers = {\n            death: 'covid-heatmap-death',\n            infected: 'covid-heatmap'\n        }\n\n        if (event.target.value === 'infected') {\n            this.state.map.setLayoutProperty(layers.infected, 'visibility', 'visible')\n            this.state.map.setLayoutProperty(layers.death, 'visibility', 'none')\n        } else {\n            this.state.map.setLayoutProperty(layers.infected, 'visibility', 'none')\n            this.state.map.setLayoutProperty(layers.death, 'visibility', 'visible')\n        }\n    }\n\n    handleAnimateChange(event) {\n        this.setState({ animate: event.target.checked }, () => {\n            this.animatedStep()\n        })\n    }\n\n    render() {\n\n        const daysAgoStringMaker = () => {\n            let daysAgo = daysBetween(this.state.date, new Date())\n            if (daysAgo === 0) {\n                return '(hoje)'\n            }\n            if (daysAgo === 1) {\n                return '(ontem)'\n            }\n            else {\n                return `(há ${daysAgo} dias)`\n            }\n        }\n\n\n        return (\n            <div style={this.props.containerStyle}>\n                <div className='console'>\n                    <h1>COVID-19 no Brasil até o dia {formatDate(this.state.date)} {daysAgoStringMaker()}</h1>\n                    <p>Fonte de dados: <a href='https://covid19br.wcota.me/'>Número de casos confirmados de COVID-19 no Brasil</a></p>\n                    <div className='session sliderbar'>\n                        <h2>Data {formatDate(this.state.date)}: <label className='active-hour'>{this.state.hour}</label></h2>\n                        <form>\n                            <label>\n                                <input name=\"animate\" type=\"checkbox\" checked={this.state.animate}\n                                    onChange={(e) => this.handleAnimateChange(e)}\n                                />\n                                Animar\n                            </label>\n                        </form>\n                        <input className='slider row' type='range' min='0' max={this.state.maxDays} step='1' value={this.state.sliderValue}\n                            onChange={(e) => this.changeSlider(e.target.value)}\n                        />\n                    </div>\n                    <form>\n                        <label>\n                            <input type=\"radio\" value=\"infected\" checked={this.state.mapType === 'infected'}\n                                onChange={(e) => this.handleMapTypeChange(e)} />\n                            Casos\n                       </label>\n                        <span> | </span>\n                        <label>\n                            <input type=\"radio\" value=\"death\" checked={this.state.mapType === 'death'}\n                                onChange={(e) => this.handleMapTypeChange(e)} />\n                            Óbitos\n                      </label>\n                    </form>\n                    <div>\n\n                    </div>\n                    <div>\n                        <div className='cityList'>\n                            {(this.state.renderableCities.length > 0) ? (<ReactList\n                                itemRenderer={/*::*/this.renderCityListItem}\n                                length={this.state.renderableCities.length}\n                                type='uniform'\n                                pageSize={3}\n                            />) : (<p>Zoom para mais detalhes.</p>)}\n                        </div>\n                    </div>\n                </div>\n                <div style={this.props.style} ref={el => this.mapContainer = el} />\n            </div>\n        )\n    }\n\n    componentDidMount() {\n        this.onSourceLoadBegin && this.onSourceLoadBegin()\n\n        const map = new mapboxgl.Map({\n            container: this.mapContainer,\n            style: 'mapbox://styles/aest/ck93dlpxn00v21imgp8zz3y6x?optimize=true',\n            center: [this.state.lng, this.state.lat],\n            zoom: this.state.zoom,\n            minPitch: 0,\n            maxPitch: 0,\n            pitchWithRotate: false,\n            logoPosition: 'bottom-right',\n\n        })\n\n        this.setState({\n            map: map\n        })\n\n\n\n        map.on('move', () => {\n            this.setState({\n                lng: map.getCenter().lng.toFixed(4),\n                lat: map.getCenter().lat.toFixed(4),\n                zoom: map.getZoom().toFixed(2)\n            });\n        });\n\n        map.on('load', () => {\n\n            map.addSource('covid', {\n                'type': 'geojson',\n                'data': `${this.baseUrl}/br/cities?response_type=geojson`\n            })\n\n            map.addSource('covid-cities-daily', {\n                'type': 'geojson',\n                'data': `${this.baseUrl}/br/cities-daily?response_type=geojson`\n            })\n\n            map.on('moveend', () => {\n                this.updateVisibleCities()\n            });\n\n            map.addLayer({\n                'id': 'covid-heatmap-death',\n                'type': 'heatmap',\n                'source': 'covid',\n                'visibility': 'none',\n                'paint': {\n                    // Increase the heatmap weight based on frequency and property magnitude\n                    'heatmap-weight': [\n                        'interpolate', ['linear'], ['number', ['get', 'newDeaths']], 0, 0, 20, 1\n                    ],\n                    // Increase the heatmap color weight weight by zoom level\n                    // heatmap-intensity is a multiplier on top of heatmap-weight\n                    'heatmap-intensity': [\n                        'interpolate', ['linear'], ['zoom'], 0, 1, 9, 3\n                    ],\n                    // Color ramp for heatmap.  Domain is 0 (low) to 1 (high).\n                    // Begin color ramp at 0-stop with a 0-transparancy color\n                    // to create a blur-like effect.\n                    'heatmap-color': [\n                        'interpolate', ['linear'], ['heatmap-density'],\n                        0, 'rgba(255,237,68,0)',\n                        0.1, '#ff9671',\n                        0.15, '#ffc75f',\n                        0.2, '#e24f4f',\n                        0.4, '#c02f36',\n                        0.6, '#9e001f',\n                        0.8, '#7d0006',\n                        1, '#5e0000'\n                    ],\n                    // Adjust the heatmap radius by zoom level\n                    'heatmap-radius': [\n                        'interpolate', ['linear'], ['zoom'], 0, 2, 9, 20\n                    ],\n                    // Transition from heatmap to circle layer by zoom level\n                    'heatmap-opacity': ['interpolate', ['linear'], ['zoom'], 7, 1, 15, 0]\n                },\n                //filter: ['<=', ['number', ['get', 'timestamp']], this.state.date]\n            },\n                'waterway-label'\n            );\n\n            map.addLayer({\n                'id': 'covid-heatmap',\n                'type': 'heatmap',\n                'source': 'covid',\n                'paint': {\n                    // Increase the heatmap weight based on frequency and property magnitude\n                    'heatmap-weight': [\n                        'interpolate', ['linear'], ['number', ['get', 'newCases']], 0, 0, 20, 1\n                    ],\n                    // Increase the heatmap color weight weight by zoom level\n                    // heatmap-intensity is a multiplier on top of heatmap-weight\n                    'heatmap-intensity': [\n                        'interpolate', ['linear'], ['zoom'], 0, 1, 9, 3\n                    ],\n                    // Color ramp for heatmap.  Domain is 0 (low) to 1 (high).\n                    // Begin color ramp at 0-stop with a 0-transparancy color\n                    // to create a blur-like effect.\n                    'heatmap-color': [\n                        'interpolate', ['linear'], ['heatmap-density'],\n                        0, 'rgba(255,237,68,0)', 0.05, 'rgb(72,244,66)', 0.15, 'rgb(68,102,237)',\n                        0.4, 'rgb(249,169,0)', 0.6, 'rgb(255,52,45)', 0.8, 'rgb(233,3,8)', 1, 'rgb(199,5,9)'\n                    ],\n                    // Adjust the heatmap radius by zoom level\n                    'heatmap-radius': [\n                        'interpolate', ['linear'], ['zoom'], 0, 2, 9, 20\n                    ],\n                    // Transition from heatmap to circle layer by zoom level\n                    'heatmap-opacity': ['interpolate', ['linear'], ['zoom'], 7, 1, 15, 0]\n                },\n                //filter: ['<=', ['number', ['get', 'timestamp']], this.state.date]\n            },\n                'waterway-label'\n            );\n\n\n            map.addLayer({\n                'id': 'covid-point',\n                'type': 'circle',\n                'source': 'covid-cities-daily',\n                'minzoom': 8,\n                'paint': {\n                    // Size circle radius by earthquake magnitude and zoom level\n                    'circle-radius': [\n                        'interpolate', ['linear'], ['zoom'],\n                        7,\n                        ['interpolate', ['linear'], ['number', ['get', 'totalCases']], 1, 1, 6, 4],\n                        16,\n                        ['interpolate', ['linear'], ['number', ['get', 'totalCases']], 1, 5, 6, 50]\n                    ],\n                    // Color circle by earthquake magnitude\n                    'circle-color': [\n                        'interpolate', ['linear'], ['number', ['get', 'totalCases']],\n                        1, 'rgba(33,102,172,0)', 2, 'rgb(178,24,43)'\n                    ],\n                    'circle-stroke-color': 'white', 'circle-stroke-width': 1,\n                    'circle-opacity': ['interpolate', ['linear'], ['zoom'], 7, 0, 8, 1]\n                },\n                //filter: ['==', ['number', ['get', 'timestamp']], this.state.date],\n            },\n                'waterway-label'\n            );\n\n            map.addLayer({\n                'id': 'all-cities',\n                'type': 'circle',\n                'source': 'covid',\n                'minzoom': 5,\n                'paint': {\n                    'circle-color': 'rgba(0,0,0,0)',\n                    'circle-stroke-width': 0,\n                },\n            },\n            );\n\n        });\n\n        map.on('idle', () => {\n            this.onSourceLoadFinished && !this.state.animate && this.onSourceLoadFinished()\n        })\n    }\n}\n\n\n\nexport default MapBox;","import React, { Component } from 'react';\nimport { getCitiesBrJson } from '../requests/covid'\nimport MapBox from './MapBox'\n//import MyResponsiveLine from './LogPlot'\nimport LoadingBar from 'react-top-loading-bar';\n\nclass MainPage extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            covidCasesGeoJson: undefined,\n            covidCasesJson: undefined,\n            loadingBarProgress: 0,\n        }\n\n        this.timers = []\n\n    }\n\n    clearIntervals() {\n        for (let timer of this.timers) {\n            clearInterval(timer)\n        }\n    }\n\n    add(value) {\n        this.setState({\n            loadingBarProgress: this.state.loadingBarProgress + value\n        })\n    }\n\n    complete = () => {\n        this.setState({ loadingBarProgress: 100 })\n        this.clearIntervals()\n    }\n\n    onLoaderFinished = () => {\n        this.setState({ loadingBarProgress: 0 })\n    }\n\n    infiniteLoad = () => {\n        this.setState({\n            loadingBarProgress: this.state.loadingBarProgress + Math.round(5 + Math.random() * 5)\n        })\n\n        this.timers.push(setInterval(\n            () => {\n                this.setState({\n                    loadingBarProgress: this.state.loadingBarProgress + Math.round(Math.random() * 5)\n                })\n            },\n            800\n        ))\n\n    }\n\n\n\n    render() {\n        return (\n            <div>\n                <LoadingBar\n                    progress={this.state.loadingBarProgress}\n                    height={3}\n                    color='red'\n                    onLoaderFinished={() => this.onLoaderFinished()}\n                />\n                <MapBox style={{ right: 0, left: 0, height: '95vh', width: '100%' }}\n                    data={this.state.covidCasesGeoJson}\n                    zoom={3} lat={-13.5958} lng={-54.4587}\n                    onSourceLoadBegin={this.infiniteLoad}\n                    onSourceLoadFinished={() => { this.complete() }}\n                />\n                {/*<div style={{ width: '100%', height: '100vh', backgroundColor: 'red' }}>\n                    <MyResponsiveLine />\n                </div>*/}\n            </div>\n        );\n    }\n\n    componentDidMount() {\n        getCitiesBrJson(\n            (data) => {\n                this.setState({ covidCasesJson: data })\n            },\n            console.error,\n        )\n    }\n\n    componentWillUnmount() {\n        this.clearIntervals()\n    }\n}\n\nexport default MainPage;\n","import React from 'react';\nimport './App.css';\nimport MainPage from './components/MainPage'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <MainPage/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}