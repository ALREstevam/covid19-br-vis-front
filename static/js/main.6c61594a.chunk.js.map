{"version":3,"sources":["common/date.js","components/CityDataItem.js","env/envVars.js","components/MapBox.js","components/Link.js","components/Footer.js","components/LinePlot.js","common/toNivoDataConverter.js","components/MainPage.js","App.js","serviceWorker.js","index.js"],"names":["daysBetween","d0","d1","Math","round","abs","formatDate","date","month","getMonth","day","getDate","year","getFullYear","length","join","styles","lastUpdate","color","fontSize","cityName","dataValue","CityDataItem","name","state","cases","deaths","className","style","require","env","MAPBOX_ACCESS_TOKEN","process","BACKEND_URL","MAPBOX_ACCESS_TOKEN_LIST","str","sep","split","read_list","mapboxgl","accessToken","MapBox","props","renderCityListItem","index","key","data","renderableCities","city","Date","totalCases","initialDate","baseUrl","onSourceLoadBegin","onSourceLoadFinished","lng","lat","zoom","sliderValue","visibleCities","animate","maxDays","mapType","loadState","features","this","map","queryRenderedFeatures","layers","cityData","perDate","sort","a","b","feature","properties","hasOwnProperty","push","timestamp","getTime","Object","keys","getVisibleOnMap","setState","visibleCitiesPerDate","reverse","onVisibleCitiesChange","changeSlider","animateTimeout","setInterval","clearInterval","value","dayNum","parseInt","newDate","days","dt","valueOf","setDate","addDays","setFilter","event","target","setLayoutProperty","checked","animatedStep","containerStyle","daysAgo","daysAgoStringMaker","href","hour","type","onChange","e","handleAnimateChange","min","max","step","handleMapTypeChange","itemRenderer","pageSize","textAlign","fontStyle","bottom","position","ref","el","mapContainer","Map","container","center","minPitch","maxPitch","pitchWithRotate","logoPosition","on","getCenter","toFixed","getZoom","addSource","updateVisibleCities","addLayer","Component","SimpleLink","children","url","text","Footer","formatNumber","num","decimalPlaces","String","Number","isInteger","toString","showSometimes","n","current","showEvery","LinePLot","colors","scheme","stacked","margin","top","right","left","tooltip","node","point","serieColor","backgroundColor","padding","border","borderColor","borderRadius","boxShadow","xFormatted","serieId","yFormatted","xScale","format","xFormat","yFormat","curve","yScale","axisTop","axisRight","axisBottom","orient","tickSize","tickPadding","tickRotation","legend","legendOffset","legendPosition","axisLeft","pointSize","pointColor","theme","pointBorderWidth","pointBorderColor","from","enablePointLabel","pointLabel","y","pointLabelYOffset","useMesh","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","itemBackground","perDate2NivoDataset","reduce","sum","newCases","newDeaths","undefined","x","yGrowthFactor","array","growthFactor","pair","casesGrowthFactor","deathGrowthFactor","perDate2NivoChartTitle","defaultTitle","states","Array","Set","showStates","slice","cities","filter","showCities","GrowthFactorMessage","MainPage","complete","loadingBarProgress","clearIntervals","onMapLoadedHandler","updatePlots","onLoaderFinished","infiniteLoad","random","timers","visibleCitiesChangeHandler","perDayChartData","perDateChartName","selectedDateChangedHandler","selectedDate","covidCasesGeoJson","covidCasesJson","timer","progress","height","width","onSelectedDateChanged","LinePlot","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6c61594a.chunk.js","sourcesContent":["export const ONE_DAY = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds\n\nexport function daysBetween(d0, d1) {\n    return Math.round(Math.abs((d0 - d1) / ONE_DAY));\n}\n\nexport function formatDate(date) {\n    let month = '' + (date.getMonth() + 1)\n    let day = '' + date.getDate()\n    let year = date.getFullYear()\n\n    if (month.length < 2) {\n        month = '0' + month;\n    }\n    if (day.length < 2) {\n        day = '0' + day;\n    }\n\n    return [day, month, year].join('/');\n}\n\nexport function addDays(date, days) {\n    var dt = new Date(date.valueOf());\n    dt.setDate(dt.getDate() + days);\n    return dt;\n}\n\nexport function toTimestamp(strDate){\n    var datum = Date.parse(strDate);\n    return datum/1000;\n }","import React from 'react';\nimport { formatDate } from '../common/date'\n\nconst CityDataItem = ({ name, state, date, cases, deaths }) => {\n    return (\n        <div className='cityListItem'>\n            <span style={styles.lastUpdate}>Última atualização {formatDate(date)}</span><br />\n            <span style={styles.cityName}><b>{name}/{state}</b></span><br />\n            <span style={styles.dataValue}><b>Casos:</b> {cases}</span>\n            <span> | </span>\n            <span style={styles.dataValue}><b>Óbitos:</b> {deaths}</span>\n        </div>)\n};\n\nconst styles = {\n    lastUpdate: {\n        color: '#949494',\n        fontSize: '.6em'\n    },\n    cityName: {\n        fontSize: '1em'\n    },\n    dataValue: {\n        color: '#3b3b3b',\n        fontSize: '.9em'\n    }\n}\n\nexport default CityDataItem","require('dotenv/config');\n\nexport function read_list(str, sep=','){\n    if(str){\n        return str.split(sep)\n    }\n}\n\n\nconst env = {\n    MAPBOX_ACCESS_TOKEN : process.env.REACT_APP_MAPBOX_ACCESS_TOKEN,\n    BACKEND_URL: process.env.REACT_APP_BACKEND_URL || 'http://localhost:3000',\n    MAPBOX_ACCESS_TOKEN_LIST: read_list(process.env.MAPBOX_ACCESS_TOKEN_LIST),\n}\n\n\n\n\nexport default env","import React, { Component } from 'react';\nimport mapboxgl from 'mapbox-gl'\nimport ReactList from 'react-list'\nimport { formatDate, daysBetween, addDays } from '../common/date'\nimport CityDataItem from './CityDataItem'\nimport env from '../env/envVars'\n\nmapboxgl.accessToken = env.MAPBOX_ACCESS_TOKEN\n\nclass MapBox extends Component {\n    constructor(props) {\n        super(props);\n\n        let initialDate = new Date('2020-02-25')\n\n        this.baseUrl = env.BACKEND_URL\n\n        this.onSourceLoadBegin = this.props.onSourceLoadBegin\n        this.onSourceLoadFinished = this.props.onSourceLoadFinished\n\n        this.state = {\n            lng: props.lng || 5,\n            lat: props.lat || 34,\n            zoom: props.zoom || 2,\n            date: new Date(),\n            sliderValue: daysBetween(new Date('2020-02-25'), new Date()),\n            data: this.props.data,\n            visibleCities: [],\n            renderableCities: [],\n            animate: false,\n            initialDate: initialDate,\n            maxDays: daysBetween(initialDate, new Date()),\n            mapType: 'infected',\n            loadState: 'loading'\n        };\n    }\n\n\n    renderCityListItem = (index, key) => {\n        const data = this.state.renderableCities[index]\n\n        return <CityDataItem\n            name={data.city}\n            state={data.state}\n            date={new Date(data.date)}\n            cases={data.totalCases}\n            deaths={data.deaths}\n            key={key}\n        />\n\n    }\n\n    getVisibleOnMap() {\n\n        let features = this.state.map.queryRenderedFeatures({ layers: ['all-cities'] });\n        let cityData = {}\n        let perDate = {}\n\n\n        if (features) {\n            features = features.sort((a, b) => new Date(a.date) - new Date(b.date))\n                .map(feature => feature.properties)\n\n            for (let feature of features) {\n                let city = feature.city\n\n                if (!perDate.hasOwnProperty(feature.date)) {\n                    perDate[feature.date] = []\n                }\n                perDate[feature.date].push(feature)\n\n\n                if (!cityData.hasOwnProperty(city) && feature.timestamp <= this.state.date.getTime()) {\n                    cityData[city] = feature\n                }\n            }\n            return [Object.keys(cityData).map(key => cityData[key]), perDate];\n        }\n        return [[], []]\n    }\n\n    async updateVisibleCities() {\n        let cityData, perDate\n        [cityData, perDate] = this.getVisibleOnMap()\n\n        this.setState({\n            visibleCities: cityData,\n            visibleCitiesPerDate: perDate,\n            renderableCities: cityData.sort((a, b) => a.totalCases - b.totalCases).reverse()\n        })\n        \n        this.props.onVisibleCitiesChange && this.state.loadState === 'loaded' && this.props.onVisibleCitiesChange(cityData, perDate)\n    }\n\n    animatedStep() {\n        if (this.state.animate) {\n            this.changeSlider(0)\n\n            this.animateTimeout = setInterval(() => {\n                if (this.state.sliderValue <= this.state.maxDays) {\n                    this.changeSlider(this.state.sliderValue + 1)\n                }\n                else {\n                    this.changeSlider(0)\n                }\n            }, 600);\n        }\n        else if (this.animateTimeout) {\n            clearInterval(this.animateTimeout);\n        }\n\n    }\n\n    changeSlider(value) {\n        let dayNum = parseInt(value)\n        let newDate = addDays(this.state.initialDate, dayNum)\n        \n        this.state.map.setFilter('covid-heatmap', ['<=', ['number', ['get', 'timestamp']], newDate.getTime()])\n        this.state.map.setFilter('covid-heatmap-death', ['<=', ['number', ['get', 'timestamp']], newDate.getTime()])\n        this.state.map.setFilter('covid-point', ['==', ['number', ['get', 'timestamp']], newDate.getTime()])\n\n        this.setState({\n            sliderValue: dayNum,\n            date: newDate,\n        })\n    }\n\n    handleMapTypeChange(event) {\n        this.setState({\n            mapType: event.target.value\n        })\n\n        let layers = {\n            death: 'covid-heatmap-death',\n            infected: 'covid-heatmap'\n        }\n\n        if (event.target.value === 'infected') {\n            this.state.map.setLayoutProperty(layers.infected, 'visibility', 'visible')\n            this.state.map.setLayoutProperty(layers.death, 'visibility', 'none')\n        } else {\n            this.state.map.setLayoutProperty(layers.infected, 'visibility', 'none')\n            this.state.map.setLayoutProperty(layers.death, 'visibility', 'visible')\n        }\n    }\n\n    handleAnimateChange(event) {\n        this.setState({ animate: event.target.checked }, () => {\n            this.animatedStep()\n        })\n    }\n\n    render() {\n\n        const daysAgoStringMaker = () => {\n            let daysAgo = daysBetween(this.state.date, new Date())\n            if (daysAgo === 0) {\n                return '(hoje)'\n            }\n            if (daysAgo === 1) {\n                return '(ontem)'\n            }\n            else {\n                return `(há ${daysAgo} dias)`\n            }\n        }\n\n\n        return (\n            <div style={this.props.containerStyle}>\n                <div className='console'>\n                    <h1 className='consoleTitle'>COVID-19 no Brasil até o dia {formatDate(this.state.date)} {daysAgoStringMaker()}</h1>\n                    <p>Fonte de dados: <a href='https://covid19br.wcota.me/'>Número de casos confirmados de COVID-19 no Brasil</a></p>\n                    <div className='session sliderbar'>\n                        <strong>{formatDate(this.state.date)}: <label className='active-hour'>{this.state.hour}</label></strong>\n                        <form>\n                            <label>\n                                <input name=\"animate\" type=\"checkbox\" checked={this.state.animate}\n                                    onChange={(e) => this.handleAnimateChange(e)}\n                                />\n                                Animar\n                            </label>\n                        </form>\n                        <input className='slider row' type='range' min='0' max={this.state.maxDays} step='1' value={this.state.sliderValue}\n                            onChange={(e) => this.changeSlider(e.target.value)}\n                        />\n                    </div>\n                    <form>\n                        <label>\n                            <input type=\"radio\" value=\"infected\" checked={this.state.mapType === 'infected'}\n                                onChange={(e) => this.handleMapTypeChange(e)} />\n                            Casos\n                       </label>\n                        <span> | </span>\n                        <label>\n                            <input type=\"radio\" value=\"death\" checked={this.state.mapType === 'death'}\n                                onChange={(e) => this.handleMapTypeChange(e)} />\n                            Óbitos\n                      </label>\n                    </form>\n                    <div>\n\n                    </div>\n                    <div>\n                        <div className='cityList'>\n                            {(this.state.renderableCities.length > 0) ? (<ReactList\n                                itemRenderer={/*::*/this.renderCityListItem}\n                                length={this.state.renderableCities.length}\n                                type='uniform'\n                                pageSize={3}\n                            />)\n                                :\n                                (<p style={{ textAlign: 'center', fontStyle: 'italic' }}>\n                                    (Use o zoom e a navegação pelo mapa para ver os detalhes de cada localidade.)</p>)}\n                        </div>\n                    </div>\n                    <div style={{ color: 'gray', fontSize: '0.5em', bottom: 0, position: 'absolute' }}>\n                        <p>\n                            <span><strong>Zoom: </strong>{this.state.zoom}</span>\n                            <span> | </span>\n                            <span><strong>Centro: </strong>{this.state.lat}, {this.state.lng}</span>\n                            <span> | </span>\n                            <span><strong>Cidades visíveis: </strong>{this.state.visibleCities.length}</span>\n                        </p>\n                    </div>\n                </div>\n                <div style={this.props.style} ref={el => this.mapContainer = el} />\n\n            </div>\n        )\n    }\n\n    componentDidMount() {\n        this.onSourceLoadBegin && this.onSourceLoadBegin()\n\n        const map = new mapboxgl.Map({\n            container: this.mapContainer,\n            style: 'mapbox://styles/aest/ck93dlpxn00v21imgp8zz3y6x?optimize=true',\n            center: [this.state.lng, this.state.lat],\n            zoom: this.state.zoom,\n            minPitch: 0,\n            maxPitch: 0,\n            pitchWithRotate: false,\n            logoPosition: 'bottom-right',\n\n        })\n\n        this.setState({\n            map: map\n        })\n\n        map.on('move', () => {\n            this.setState({\n                lng: map.getCenter().lng.toFixed(4),\n                lat: map.getCenter().lat.toFixed(4),\n                zoom: map.getZoom().toFixed(2)\n            });\n        });\n\n        map.on('load', () => {\n\n            map.addSource('covid', {\n                'type': 'geojson',\n                'data': `${this.baseUrl}/api/v1/br/cities.geojson`\n            })\n\n            map.addSource('covid-cities-daily', {\n                'type': 'geojson',\n                'data': `${this.baseUrl}/api/v1/br/cities-daily.geojson`\n            })\n\n            map.on('moveend', () => {\n                this.updateVisibleCities()\n            });\n\n            map.addLayer({\n                'id': 'covid-heatmap-death',\n                'type': 'heatmap',\n                'source': 'covid',\n                'visibility': 'none',\n                'paint': {\n                    // Increase the heatmap weight based on frequency and property magnitude\n                    'heatmap-weight': [\n                        'interpolate', ['linear'], ['number', ['get', 'newDeaths']], 0, 0, 20, 1\n                    ],\n                    // Increase the heatmap color weight weight by zoom level\n                    // heatmap-intensity is a multiplier on top of heatmap-weight\n                    'heatmap-intensity': [\n                        'interpolate', ['linear'], ['zoom'], 0, 1, 9, 3\n                    ],\n                    // Color ramp for heatmap.  Domain is 0 (low) to 1 (high).\n                    // Begin color ramp at 0-stop with a 0-transparancy color\n                    // to create a blur-like effect.\n                    'heatmap-color': [\n                        'interpolate', ['linear'], ['heatmap-density'],\n                        0, 'rgba(255,237,68,0)',\n                        0.1, '#ff9671',\n                        0.15, '#ffc75f',\n                        0.2, '#e24f4f',\n                        0.4, '#c02f36',\n                        0.6, '#9e001f',\n                        0.8, '#7d0006',\n                        1, '#5e0000'\n                    ],\n                    // Adjust the heatmap radius by zoom level\n                    'heatmap-radius': [\n                        'interpolate', ['linear'], ['zoom'], 0, 2, 9, 20\n                    ],\n                    // Transition from heatmap to circle layer by zoom level\n                    'heatmap-opacity': ['interpolate', ['linear'], ['zoom'], 7, 1, 15, 0]\n                },\n                //filter: ['<=', ['number', ['get', 'timestamp']], this.state.date]\n            },\n                'waterway-label'\n            );\n\n            map.addLayer({\n                'id': 'covid-heatmap',\n                'type': 'heatmap',\n                'source': 'covid',\n                'paint': {\n                    // Increase the heatmap weight based on frequency and property magnitude\n                    'heatmap-weight': [\n                        'interpolate', ['linear'], ['number', ['get', 'newCases']], 0, 0, 20, 1\n                    ],\n                    // Increase the heatmap color weight weight by zoom level\n                    // heatmap-intensity is a multiplier on top of heatmap-weight\n                    'heatmap-intensity': [\n                        'interpolate', ['linear'], ['zoom'], 0, 1, 9, 3\n                    ],\n                    // Color ramp for heatmap.  Domain is 0 (low) to 1 (high).\n                    // Begin color ramp at 0-stop with a 0-transparancy color\n                    // to create a blur-like effect.\n                    'heatmap-color': [\n                        'interpolate', ['linear'], ['heatmap-density'],\n                        0, 'rgba(255,237,68,0)', 0.05, 'rgb(72,244,66)', 0.15, 'rgb(68,102,237)',\n                        0.4, 'rgb(249,169,0)', 0.6, 'rgb(255,52,45)', 0.8, 'rgb(233,3,8)', 1, 'rgb(199,5,9)'\n                    ],\n                    // Adjust the heatmap radius by zoom level\n                    'heatmap-radius': [\n                        'interpolate', ['linear'], ['zoom'], 0, 2, 9, 20\n                    ],\n                    // Transition from heatmap to circle layer by zoom level\n                    'heatmap-opacity': ['interpolate', ['linear'], ['zoom'], 7, 1, 15, 0]\n                },\n                //filter: ['<=', ['number', ['get', 'timestamp']], this.state.date]\n            },\n                'waterway-label'\n            );\n\n\n            map.addLayer({\n                'id': 'covid-point',\n                'type': 'circle',\n                'source': 'covid-cities-daily',\n                'minzoom': 8,\n                'paint': {\n                    // Size circle radius by earthquake magnitude and zoom level\n                    'circle-radius': [\n                        'interpolate', ['linear'], ['zoom'],\n                        7,\n                        ['interpolate', ['linear'], ['number', ['get', 'totalCases']], 1, 1, 6, 4],\n                        16,\n                        ['interpolate', ['linear'], ['number', ['get', 'totalCases']], 1, 5, 6, 50]\n                    ],\n                    // Color circle by earthquake magnitude\n                    'circle-color': [\n                        'interpolate', ['linear'], ['number', ['get', 'totalCases']],\n                        1, 'rgba(33,102,172,0)', 2, 'rgb(178,24,43)'\n                    ],\n                    'circle-stroke-color': 'white', 'circle-stroke-width': 1,\n                    'circle-opacity': ['interpolate', ['linear'], ['zoom'], 7, 0, 8, 1]\n                },\n                //filter: ['==', ['number', ['get', 'timestamp']], this.state.date],\n            },\n                'waterway-label'\n            );\n\n            map.addLayer({\n                'id': 'all-cities',\n                'type': 'circle',\n                'source': 'covid',\n                'minzoom': 2.8,\n                'paint': {\n                    'circle-color': 'rgba(0,0,0,0)',\n                    'circle-stroke-width': 0,\n                },\n            },\n            );\n\n        });\n\n        map.on('idle', () => {\n            this.onSourceLoadFinished && !this.state.animate && this.onSourceLoadFinished()\n\n            if (this.state.loadState === 'loading') {\n                this.setState({\n                    loadState: 'loaded'\n                })\n                this.updateVisibleCities()\n            }\n        })\n    }\n}\n\n\n\nexport default MapBox;","import React from 'react'\n\nconst SimpleLink = ({ children, url, text, style, target='_blank'}) => {\n\n    if(children){\n        return (\n            <a href={url} style={style} target={target}>\n                {children}\n            </a>\n        )\n    }\n    if(text){\n        return (<a href={url} style={style} target={target}>{text}</a>)\n    }\n    return <a href={url} style={style} target={target}>{url}</a>\n}\nexport default SimpleLink","import React from 'react'\nimport SimpleLink from './Link'\n\nexport default function Footer() {\n    return (\n        <div className='footer'>\n\n            <strong style={{'fontSize': '1.2em'}}>Importante:</strong>\n\n            <p>\n            <strong>Este é apenas um experimento em visualização de dados.</strong>\n            </p>\n\n            <p>Não sou especialista em visualização de dados nem em disseminação de doenças, então\n            não confie nos dados deste site, é apenas uma tentativa de visualizar a disseminação\n            da doença e pode (certamente não) corresponder com a realdade.</p>\n            \n            <p>\n            Então lembre-se de considerar que qualquer dado pode parecer mais ou menos alarmante \n            dependendo da forma como é apresentado e que eu não tenho a competência necessária\n            para availiar isso de forma totalmente correta.\n            </p>\n\n            <p>\n            Sugestões ou correções podem ser enviadas pelo GitHub (link a seguir).\n            </p>\n\n            <hr/>\n\n            <p>\n                <strong>Meu perfil no GitHub:  </strong>\n\n                <SimpleLink url='https://github.com/ALREstevam' />\n            </p>\n            \n            <p>\n                <strong>Repositórios deste projeto no GitHub:  </strong>\n                <SimpleLink url='https://github.com/ALREstevam/covid19-br-vis-back'/>\n                <span> e </span>\n                <SimpleLink url='https://github.com/ALREstevam/covid19-br-vis-back'/>\n                <span>.</span>\n            </p>\n            \n        </div>\n    )\n}\n","import React from 'react'\nimport { ResponsiveLine } from '@nivo/line'\n\n\nfunction formatNumber(num, decimalPlaces=2) {\n    if (typeof num === 'string' || num instanceof String) {\n        return num\n    }\n    if (Number.isInteger(num)) {\n        return num.toString()\n    }\n    else {\n        return Number(num).toFixed(decimalPlaces).toString()\n    }\n}\n\nfunction showEvery(n){\n    let current = 0\n    return (value) => {\n      current += 1\n      if(current % n === 0){\n        current = 0\n        return value\n      }else{\n        return ''\n      }\n    }\n}\n\nconst showSometimes = showEvery(3)\n\n\nconst LinePLot = ({ data, colors={scheme: 'set3'}, stacked=false }) => (\n    <ResponsiveLine\n        data={data}\n        margin={{ top: 50, right: 60, bottom: 100, left: 60 }}\n        tooltip={(node) => (\n            <div style={{\n                color: node.point.serieColor,\n                backgroundColor: '#fff',\n                padding: '5px',\n                border: `1px solid ${node.point.borderColor}`,\n                textAlign: 'center',\n                borderRadius: '5px',\n                boxShadow: '5px 5px 10px -7px rgba(0,0,0,0.75)'\n            }}>\n                <strong style={{fontSize: '.9em'}}>{node.point.data.xFormatted}</strong><br />\n                <span>{node.point.serieId}: <strong>{node.point.data.yFormatted}</strong></span>\n            </div>\n        )}\n        xScale={{\n            type: 'time', //point, time, linear\n            //min: 0,\n            //max: 'auto',\n            format: \"%Y-%m-%dT%H:%M:%S\",\n            //precision: \"hour\",\n            //2020-02-25T00:00:00\n        }}\n        xFormat=\"time:%m/%d\"\n        yFormat={formatNumber}\n        curve=\"natural\"\n        yScale={{ type: 'linear', min: 0, max: 'auto', stacked: stacked, reverse: false }}\n        axisTop={null}\n        axisRight={null}\n        axisBottom={{\n            orient: 'bottom',\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            legend: 'Tempo',\n            legendOffset: 36,\n            legendPosition: 'middle',\n            format: '%d/%m',\n        }}\n        axisLeft={{\n            legend: 'Pessoas',\n            orient: 'left',\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            legendOffset: -40,\n            legendPosition: 'middle'\n        }}\n        colors={colors}\n        pointSize={10}\n        pointColor={{ theme: 'background' }}\n        pointBorderWidth={2}\n        pointBorderColor={{ from: 'serieColor' }}\n        enablePointLabel={true}\n        pointLabel={e => showSometimes(formatNumber(e.y, 4))}\n        pointLabelYOffset={-12}\n        useMesh={true}\n        legends={[\n            {\n                anchor: 'bottom-left',\n                direction: 'row',\n                justify: false,\n                translateX: 0,\n                translateY: 90,\n                itemsSpacing: 0,\n                itemDirection: 'left-to-right',\n                itemWidth: 80,\n                itemHeight: 20,\n                itemOpacity: 0.75,\n                symbolSize: 12,\n                symbolShape: 'circle',\n                symbolBorderColor: 'rgba(0, 0, 0, .5)',\n                effects: [\n                    {\n                        on: 'hover',\n                        style: {\n                            itemBackground: 'rgba(0, 0, 0, .03)',\n                            itemOpacity: 1\n                        }\n                    }\n                ]\n            }\n        ]}\n    />\n)\n\nexport default LinePLot","export const perDate2NivoDataset = (visibleCitiesPerDate) => {\n    let data = Object.keys(visibleCitiesPerDate)\n        .sort((a, b) => (new Date(a)) - (new Date(b)))\n        .map(key => visibleCitiesPerDate[key].reduce(\n            (sum, city) => {\n                return {\n                    date: key,\n                    deaths: sum.deaths + city.deaths,\n                    newCases: sum.newCases + city.newCases,\n                    newDeaths: sum.newDeaths + city.newDeaths,\n                    totalCases: sum.totalCases + city.totalCases,\n                }\n            }, {\n            date: undefined,\n            deaths: 0,\n            newCases: 0,\n            newDeaths: 0,\n            totalCases: 0,\n        }))\n\n    let cases = {\n        \"id\": \"Casos\",\n        \"color\": \"#61cdbb\",\n        \"data\": data.map(day => {\n            return {\n                x: day.date,\n                y: day.totalCases,\n            }\n        })\n    }\n\n    let deaths = {\n        \"id\": \"Óbitos\",\n        \"color\": \"#f47560\",\n        \"data\": data.map(day => {\n            return {\n                x: day.date,\n                y: day.deaths,\n            }\n        })\n    }\n\n    function yGrowthFactor(array) {\n        let growthFactor = []\n        let pair = [/*yesterday, today*/]\n\n        for (let el of array) {\n            pair.push(el)\n            if (pair.length === 2) {\n                let y = pair[0].y === 0 ? 1 : pair[1].y / pair[0].y\n\n                    growthFactor.push(\n                        {\n                            x: el.x,\n                            y: y,\n                        }\n                    )\n                pair = [el] //today becomes yesterday\n            }\n        }\n        return growthFactor\n    }\n\n\n    let casesGrowthFactor = {\n        \"id\": \"Fator de crescimento - casos\",\n        \"color\": \"#f47560\",\n        \"data\": yGrowthFactor(cases.data)\n    }\n\n    let deathGrowthFactor = {\n        \"id\": \"Fator de crescimento - óbitos\",\n        \"color\": \"#f47560\",\n        \"data\": yGrowthFactor(deaths.data)\n    }\n\n    return {\n        deaths: deaths,\n        cases: cases,\n        casesGrowthFactor: casesGrowthFactor,\n        deathGrowthFactor: deathGrowthFactor,\n    }\n}\n\nexport const perDate2NivoChartTitle = (visibleCitiesPerDate, defaultTitle) => {\n\n    if (Object.keys(visibleCitiesPerDate).length === 0) {\n        return defaultTitle\n    }\n\n    let data = visibleCitiesPerDate[Object.keys(visibleCitiesPerDate)[0]]\n\n    let states = Array.from(new Set(data.map(city => city.state)))\n\n    if (data.length > 350 || states.length >= 25) {\n        return 'todo o Brasil'\n    }\n\n    if (data.length > 40) {\n        let showStates = states.slice(0, 3)\n\n        if (states.length - 3 > 1) {\n            return 'parte de ' + showStates.join(', ') + ' e outros ' + (states.length - 3) + ' estados'\n        }\n        if (states.length - 3 === 1) {\n            return 'parte de ' + showStates.join(', ') + ' e outro estado'\n        }\n        else {\n            if (showStates.length === 3) {\n                return showStates.join(', ')\n            }\n            if (showStates.length === 2) {\n                return showStates.join(' e ')\n            }\n            else {\n                return showStates[0]\n            }\n        }\n    }\n    else {\n        let cities = data.map(city => city.city).filter(city => city !== 'CASO SEM LOCALIZAÇÃO DEFINIDA')\n        let showCities = cities.slice(0, 3)\n\n        if (cities.length - 3 > 1) {\n            return showCities.join(', ') + ' e outras ' + (cities.length - 3) + ' cidades'\n        }\n        if (cities.length - 3 === 1) {\n            return showCities.join(', ') + ' e outra cidade'\n        }\n        else {\n            if (showCities.length === 3) {\n                return showCities.join(', ')\n            }\n            if (showCities.length === 2) {\n                return showCities.join(' e ')\n            }\n            else {\n                return showCities[0]\n            }\n        }\n    }\n\n\n}\n","import React, { Component } from 'react';\n//import { getCitiesBrJson } from '../requests/covid'\nimport MapBox from './MapBox'\n//import MyResponsiveLine from './LogPlot'\nimport LoadingBar from 'react-top-loading-bar';\nimport Footer from './Footer'\nimport LinePlot from './LinePlot'\nimport { perDate2NivoDataset, perDate2NivoChartTitle } from '../common/toNivoDataConverter'\n\nconst GrowthFactorMessage = () => (\n\n    <div className='nivoCharts'>\n        <h3>Fator de crescimento</h3>\n        <p>\n            O <strong>Fator de Crescimento</strong> (ou <em>Growth Factor</em>) é calculado pela divisão <code>ValorDia/ValorDiaAnterior</code> e reflete\n            o crescimento diário no número de casos e óbitos computados:\n                        </p>\n\n        <ul>\n            <li><code>Fator de Crescimento<strong> &gt; </strong>0</code>: o valor referido aumentou desde o último dia</li>\n            <li><code>Fator de Crescimento<strong> &lt; </strong>0</code>: o valor referido diminuiu desde o último dia</li>\n            <li><code>Fator de Crescimento<strong> ≈ </strong>0</code>: o valor referido não mudou significativamente desde o último dia</li>\n        </ul>\n\n        <p>\n            O fator de crescimento é uma importante métrica na avaliação da disseminação da doença e ocorrência de mortes, mas\n            é totalmente dependente da testagem em massa da população e da confirmação da causa dos óbitos onde há suspeita de COVID-19,\n            assim, um aumento ou diminuição neste fator pode ocorrer caso a quantidade de testes realizados mude e não somente\n            se a quantidade de pessoas infectadas ou óbitos confirmados se alterar.\n                    </p>\n    </div>\n)\n\nclass MainPage extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            covidCasesGeoJson: undefined,\n            covidCasesJson: undefined,\n            loadingBarProgress: 0,\n            visibleCities: [],\n            visibleCitiesPerDate: {},\n            selectedDate: new Date(),\n            perDayChartData: perDate2NivoDataset({}),\n            perDateChartName: 'COVID-19 em todo o Brasil'\n        }\n\n        this.timers = []\n\n    }\n\n    clearIntervals() {\n        for (let timer of this.timers) {\n            clearInterval(timer)\n        }\n    }\n\n    add(value) {\n        this.setState({\n            loadingBarProgress: this.state.loadingBarProgress + value\n        })\n    }\n\n    complete = () => {\n        this.setState({ loadingBarProgress: 100 })\n        this.clearIntervals()\n    }\n\n    onMapLoadedHandler = () => {\n        this.complete()\n        this.updatePlots()\n    }\n\n    onLoaderFinished = () => {\n        this.setState({ loadingBarProgress: 0 })\n    }\n\n    infiniteLoad = () => {\n        this.setState({\n            loadingBarProgress: this.state.loadingBarProgress + Math.round(5 + Math.random() * 5)\n        })\n\n        this.timers.push(setInterval(\n            () => {\n                this.setState({\n                    loadingBarProgress: this.state.loadingBarProgress + Math.round(Math.random() * 5)\n                })\n            },\n            800\n        ))\n\n    }\n\n    visibleCitiesChangeHandler = async (visibleCities, visibleCitiesPerDate) => {\n        this.setState({\n            visibleCities: visibleCities,\n            visibleCitiesPerDate: visibleCitiesPerDate,\n        })\n        this.updatePlots()\n    }\n\n    updatePlots = async () => {\n        this.setState({\n            perDayChartData: perDate2NivoDataset(this.state.visibleCitiesPerDate),\n            perDateChartName: 'COVID-19 em ' + perDate2NivoChartTitle(this.state.visibleCitiesPerDate, \"todo o Brasil\")\n        })\n    }\n\n    selectedDateChangedHandler = (date) => {\n        this.setState({ selectedDate: date })\n    }\n\n\n\n    render() {\n        return (\n            <div>\n                <LoadingBar\n                    progress={this.state.loadingBarProgress}\n                    height={3}\n                    color='red'\n                    onLoaderFinished={this.onLoaderFinished}\n                />\n                <MapBox style={{ right: 0, left: 0, height: '95vh', width: '100%' }}\n                    data={this.state.covidCasesGeoJson}\n                    zoom={3} lat={-13.5958} lng={-54.4587}\n                    onSourceLoadBegin={this.infiniteLoad}\n                    onSourceLoadFinished={this.onMapLoadedHandler}\n                    onVisibleCitiesChange={this.visibleCitiesChangeHandler}\n                    onSelectedDateChanged={this.selectedDateChangedHandler}\n                />\n                <div className='nivoCharts'>\n                    <h2>{this.state.perDateChartName}</h2>\n                    <h3>Casos e óbitos</h3>\n                    <div style={{ width: '100%', height: '100vh' }}>\n                        <LinePlot\n                            data={[this.state.perDayChartData.deaths, this.state.perDayChartData.cases]}\n                            colors={['#fa4343', '#0068d2']} \n                            stacked={true}/>\n                    </div>\n                    <h3>Óbitos</h3>\n                    <div style={{ width: '100%', height: '50vh', }}>\n                        <LinePlot data={[this.state.perDayChartData.deaths]} \n                            colors={['#fa4343']} />\n                    </div>\n\n                    <GrowthFactorMessage />\n\n                    <div style={{ width: '100%', height: '80vh', }}>\n                        <LinePlot data={[this.state.perDayChartData.casesGrowthFactor]}\n                        colors={['#00d3eb']}/>\n                    </div>\n                    <div style={{ width: '100%', height: '80vh', }}>\n                        <LinePlot data={[this.state.perDayChartData.deathGrowthFactor]} \n                        colors={['#ff6a7f']}/>\n                    </div>\n                    {/*<div style={{ width: '100%', height: '100vh', backgroundColor: 'red' }}>\n                    <MyResponsiveLine />\n                </div>*/}\n                </div>\n                <Footer />\n            </div>\n        );\n    }\n\n    componentDidMount() {\n    }\n\n    componentWillUnmount() {\n        this.clearIntervals()\n    }\n}\n\nexport default MainPage;\n","import React from 'react';\nimport './App.css';\nimport MainPage from './components/MainPage'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <MainPage/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}