{"version":3,"sources":["env/envVars.js","common/date.js","components/CityDataItem.js","components/MapBox.js","components/Link.js","components/Footer.js","components/MainPage.js","App.js","serviceWorker.js","index.js"],"names":["require","env","MAPBOX_ACCESS_TOKEN","process","BACKEND_URL","MAPBOX_ACCESS_TOKEN_LIST","str","sep","split","read_list","daysBetween","d0","d1","Math","round","abs","formatDate","date","month","getMonth","day","getDate","year","getFullYear","length","join","styles","lastUpdate","color","fontSize","cityName","dataValue","CityDataItem","name","state","cases","deaths","className","style","mapboxgl","accessToken","MapBox","props","renderCityListItem","index","key","data","renderableCities","city","Date","totalCases","initialDate","baseUrl","onSourceLoadBegin","onSourceLoadFinished","lng","lat","zoom","sliderValue","visibleCities","animate","maxDays","mapType","features","this","map","queryRenderedFeatures","layers","cityData","perDate","sort","a","b","feature","properties","hasOwnProperty","push","timestamp","getTime","Object","keys","getVisibleOnMap","setState","visibleCitiesPerDate","reverse","changeSlider","animateTimeout","setInterval","setTimeout","clearInterval","value","dayNum","parseInt","newDate","days","dt","valueOf","setDate","addDays","updateVisibleCities","setFilter","event","target","setLayoutProperty","checked","animatedStep","containerStyle","daysAgo","daysAgoStringMaker","href","hour","type","onChange","e","handleAnimateChange","min","max","step","handleMapTypeChange","itemRenderer","pageSize","ref","el","mapContainer","Map","container","center","minPitch","maxPitch","pitchWithRotate","logoPosition","on","getCenter","toFixed","getZoom","addSource","addLayer","Component","SimpleLink","children","url","text","Footer","MainPage","complete","loadingBarProgress","clearIntervals","onLoaderFinished","infiniteLoad","random","timers","covidCasesGeoJson","undefined","covidCasesJson","timer","progress","height","right","left","width","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f72d46e2.chunk.js","sourcesContent":["require('dotenv/config');\n\nexport function read_list(str, sep=','){\n    if(str){\n        return str.split(sep)\n    }\n}\n\n\nconst env = {\n    MAPBOX_ACCESS_TOKEN : process.env.REACT_APP_MAPBOX_ACCESS_TOKEN,\n    BACKEND_URL: process.env.REACT_APP_BACKEND_URL || 'http://localhost:3000',\n    MAPBOX_ACCESS_TOKEN_LIST: read_list(process.env.MAPBOX_ACCESS_TOKEN_LIST),\n}\n\n\n\n\nexport default env","export const ONE_DAY = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds\n\nexport function daysBetween(d0, d1) {\n    return Math.round(Math.abs((d0 - d1) / ONE_DAY));\n}\n\nexport function formatDate(date) {\n    let month = '' + (date.getMonth() + 1)\n    let day = '' + date.getDate()\n    let year = date.getFullYear()\n\n    if (month.length < 2) {\n        month = '0' + month;\n    }\n    if (day.length < 2) {\n        day = '0' + day;\n    }\n\n    return [day, month, year].join('/');\n}\n\nexport function addDays(date, days) {\n    var dt = new Date(date.valueOf());\n    dt.setDate(dt.getDate() + days);\n    return dt;\n}\n\nexport function toTimestamp(strDate){\n    var datum = Date.parse(strDate);\n    return datum/1000;\n }","import React from 'react';\nimport { formatDate } from '../common/date'\n\nconst CityDataItem = ({ name, state, date, cases, deaths }) => {\n    return (\n        <div className='cityListItem'>\n            <span style={styles.lastUpdate}>Última atualização {formatDate(date)}</span><br />\n            <span style={styles.cityName}><b>{name}/{state}</b></span><br />\n            <span style={styles.dataValue}><b>Casos:</b> {cases}</span><br />\n            <span style={styles.dataValue}><b>Óbitos:</b> {deaths}</span>\n        </div>)\n};\n\nconst styles = {\n    lastUpdate: {\n        color: '#949494',\n        fontSize: '.6em'\n    },\n    cityName: {\n        fontSize: '1em'\n    },\n    dataValue: {\n        color: '#3b3b3b',\n        fontSize: '.9em'\n    }\n}\n\nexport default CityDataItem","import React, { Component } from 'react';\nimport mapboxgl from 'mapbox-gl'\nimport ReactList from 'react-list'\nimport { formatDate, daysBetween, addDays } from '../common/date'\nimport CityDataItem from './CityDataItem'\nimport env from '../env/envVars'\n\nmapboxgl.accessToken = env.MAPBOX_ACCESS_TOKEN\n\n/*\nconst CitiesList = ({ cities }) => {\n    return (\n        cities.length ?\n             :\n            <p>(Zoom para mais detalhes)</p>\n    )\n}\n\n*/\n\nclass MapBox extends Component {\n    constructor(props) {\n        super(props);\n\n        let initialDate = new Date('2020-02-25')\n\n        this.baseUrl = env.BACKEND_URL\n\n        this.onSourceLoadBegin = this.props.onSourceLoadBegin\n        this.onSourceLoadFinished = this.props.onSourceLoadFinished\n\n        this.state = {\n            lng: props.lng || 5,\n            lat: props.lat || 34,\n            zoom: props.zoom || 2,\n            date: new Date(),\n            sliderValue: daysBetween(new Date('2020-02-25'), new Date()),\n            data: this.props.data,\n            visibleCities: [],\n            renderableCities: [],\n            animate: false,\n            initialDate: initialDate,\n            maxDays: daysBetween(initialDate, new Date()),\n            mapType: 'infected',\n        };\n    }\n\n\n    renderCityListItem = (index, key) => {\n        const data = this.state.renderableCities[index]\n\n        return <CityDataItem\n            name={data.city}\n            state={data.state}\n            date={new Date(data.date)}\n            cases={data.totalCases}\n            deaths={data.deaths}\n            key={key}\n        />\n\n    }\n\n    getVisibleOnMap() {\n\n        let features = this.state.map.queryRenderedFeatures({ layers: ['all-cities'] });\n        let cityData = {}\n        let perDate = {}\n\n\n        if (features) {\n            features = features.sort((a, b) => new Date(a.date) - new Date(b.date))\n                .map(feature => feature.properties)\n\n            for (let feature of features) {\n                let city = feature.city\n\n                if (!perDate.hasOwnProperty(feature.date)) {\n                    perDate[feature.date] = []\n                }\n                perDate[feature.date].push(feature)\n\n\n                if (!cityData.hasOwnProperty(city) && feature.timestamp <= this.state.date.getTime()) {\n                    cityData[city] = feature\n                }\n            }\n\n            return [Object.keys(cityData).map(key => cityData[key]), perDate];\n        }\n        return [[], []]\n    }\n\n    updateVisibleCities() {\n        if (this.state.zoom > 5) {\n            let cityData, perDate\n            [cityData, perDate] = this.getVisibleOnMap()\n\n            this.setState({\n                visibleCities: cityData,\n                visibleCitiesPerDate: perDate,\n                renderableCities: cityData.sort((a, b) => a.totalCases - b.totalCases).reverse()\n            })\n        }\n        else {\n            this.setState({\n                visibleCities: [],\n                renderableCities: []\n            })\n        }\n    }\n\n    animatedStep() {\n        if (this.state.animate) {\n            this.changeSlider(0)\n\n            this.animateTimeout = setInterval(() => {\n                if (this.state.sliderValue <= this.state.maxDays) {\n                    this.changeSlider(this.state.sliderValue + 1)\n                }\n                else {\n                    setTimeout(() => {\n                        this.changeSlider(0)\n                    }, 2000)\n                }\n            }, 400);\n        }\n        else if (this.animateTimeout) {\n            clearInterval(this.animateTimeout);\n        }\n\n    }\n\n    changeSlider(value) {\n        let dayNum = parseInt(value)\n        let newDate = addDays(this.state.initialDate, dayNum)\n        this.setState({\n            sliderValue: dayNum,\n            date: newDate,\n        })\n\n        this.updateVisibleCities()\n\n        this.state.map.setFilter('covid-heatmap', ['<=', ['number', ['get', 'timestamp']], newDate.getTime()])\n        this.state.map.setFilter('covid-heatmap-death', ['<=', ['number', ['get', 'timestamp']], newDate.getTime()])\n        this.state.map.setFilter('covid-point', ['==', ['number', ['get', 'timestamp']], newDate.getTime()])\n    }\n\n    handleMapTypeChange(event) {\n        this.setState({\n            mapType: event.target.value\n        })\n\n        let layers = {\n            death: 'covid-heatmap-death',\n            infected: 'covid-heatmap'\n        }\n\n        if (event.target.value === 'infected') {\n            this.state.map.setLayoutProperty(layers.infected, 'visibility', 'visible')\n            this.state.map.setLayoutProperty(layers.death, 'visibility', 'none')\n        } else {\n            this.state.map.setLayoutProperty(layers.infected, 'visibility', 'none')\n            this.state.map.setLayoutProperty(layers.death, 'visibility', 'visible')\n        }\n    }\n\n    handleAnimateChange(event) {\n        this.setState({ animate: event.target.checked }, () => {\n            this.animatedStep()\n        })\n    }\n\n    render() {\n\n        const daysAgoStringMaker = () => {\n            let daysAgo = daysBetween(this.state.date, new Date())\n            if (daysAgo === 0) {\n                return '(hoje)'\n            }\n            if (daysAgo === 1) {\n                return '(ontem)'\n            }\n            else {\n                return `(há ${daysAgo} dias)`\n            }\n        }\n\n\n        return (\n            <div style={this.props.containerStyle}>\n                <div className='console'>\n                    <h1>COVID-19 no Brasil até o dia {formatDate(this.state.date)} {daysAgoStringMaker()}</h1>\n                    <p>Fonte de dados: <a href='https://covid19br.wcota.me/'>Número de casos confirmados de COVID-19 no Brasil</a></p>\n                    <div className='session sliderbar'>\n                        <h2>Data {formatDate(this.state.date)}: <label className='active-hour'>{this.state.hour}</label></h2>\n                        <form>\n                            <label>\n                                <input name=\"animate\" type=\"checkbox\" checked={this.state.animate}\n                                    onChange={(e) => this.handleAnimateChange(e)}\n                                />\n                                Animar\n                            </label>\n                        </form>\n                        <input className='slider row' type='range' min='0' max={this.state.maxDays} step='1' value={this.state.sliderValue}\n                            onChange={(e) => this.changeSlider(e.target.value)}\n                        />\n                    </div>\n                    <form>\n                        <label>\n                            <input type=\"radio\" value=\"infected\" checked={this.state.mapType === 'infected'}\n                                onChange={(e) => this.handleMapTypeChange(e)} />\n                            Casos\n                       </label>\n                        <span> | </span>\n                        <label>\n                            <input type=\"radio\" value=\"death\" checked={this.state.mapType === 'death'}\n                                onChange={(e) => this.handleMapTypeChange(e)} />\n                            Óbitos\n                      </label>\n                    </form>\n                    <div>\n\n                    </div>\n                    <div>\n                        <div className='cityList'>\n                            {(this.state.renderableCities.length > 0) ? (<ReactList\n                                itemRenderer={/*::*/this.renderCityListItem}\n                                length={this.state.renderableCities.length}\n                                type='uniform'\n                                pageSize={3}\n                            />) : (<p>Zoom para mais detalhes.</p>)}\n                        </div>\n                    </div>\n                </div>\n                <div style={this.props.style} ref={el => this.mapContainer = el} />\n            </div>\n        )\n    }\n\n    componentDidMount() {\n        this.onSourceLoadBegin && this.onSourceLoadBegin()\n\n        const map = new mapboxgl.Map({\n            container: this.mapContainer,\n            style: 'mapbox://styles/aest/ck93dlpxn00v21imgp8zz3y6x?optimize=true',\n            center: [this.state.lng, this.state.lat],\n            zoom: this.state.zoom,\n            minPitch: 0,\n            maxPitch: 0,\n            pitchWithRotate: false,\n            logoPosition: 'bottom-right',\n\n        })\n\n        this.setState({\n            map: map\n        })\n\n\n\n        map.on('move', () => {\n            this.setState({\n                lng: map.getCenter().lng.toFixed(4),\n                lat: map.getCenter().lat.toFixed(4),\n                zoom: map.getZoom().toFixed(2)\n            });\n        });\n\n        map.on('load', () => {\n\n            map.addSource('covid', {\n                'type': 'geojson',\n                'data': `${this.baseUrl}/api/v1/br/cities.geojson`\n            })\n\n            map.addSource('covid-cities-daily', {\n                'type': 'geojson',\n                'data': `${this.baseUrl}/api/v1/br/cities-daily.geojson`\n            })\n\n            map.on('moveend', () => {\n                this.updateVisibleCities()\n            });\n\n            map.addLayer({\n                'id': 'covid-heatmap-death',\n                'type': 'heatmap',\n                'source': 'covid',\n                'visibility': 'none',\n                'paint': {\n                    // Increase the heatmap weight based on frequency and property magnitude\n                    'heatmap-weight': [\n                        'interpolate', ['linear'], ['number', ['get', 'newDeaths']], 0, 0, 20, 1\n                    ],\n                    // Increase the heatmap color weight weight by zoom level\n                    // heatmap-intensity is a multiplier on top of heatmap-weight\n                    'heatmap-intensity': [\n                        'interpolate', ['linear'], ['zoom'], 0, 1, 9, 3\n                    ],\n                    // Color ramp for heatmap.  Domain is 0 (low) to 1 (high).\n                    // Begin color ramp at 0-stop with a 0-transparancy color\n                    // to create a blur-like effect.\n                    'heatmap-color': [\n                        'interpolate', ['linear'], ['heatmap-density'],\n                        0, 'rgba(255,237,68,0)',\n                        0.1, '#ff9671',\n                        0.15, '#ffc75f',\n                        0.2, '#e24f4f',\n                        0.4, '#c02f36',\n                        0.6, '#9e001f',\n                        0.8, '#7d0006',\n                        1, '#5e0000'\n                    ],\n                    // Adjust the heatmap radius by zoom level\n                    'heatmap-radius': [\n                        'interpolate', ['linear'], ['zoom'], 0, 2, 9, 20\n                    ],\n                    // Transition from heatmap to circle layer by zoom level\n                    'heatmap-opacity': ['interpolate', ['linear'], ['zoom'], 7, 1, 15, 0]\n                },\n                //filter: ['<=', ['number', ['get', 'timestamp']], this.state.date]\n            },\n                'waterway-label'\n            );\n\n            map.addLayer({\n                'id': 'covid-heatmap',\n                'type': 'heatmap',\n                'source': 'covid',\n                'paint': {\n                    // Increase the heatmap weight based on frequency and property magnitude\n                    'heatmap-weight': [\n                        'interpolate', ['linear'], ['number', ['get', 'newCases']], 0, 0, 20, 1\n                    ],\n                    // Increase the heatmap color weight weight by zoom level\n                    // heatmap-intensity is a multiplier on top of heatmap-weight\n                    'heatmap-intensity': [\n                        'interpolate', ['linear'], ['zoom'], 0, 1, 9, 3\n                    ],\n                    // Color ramp for heatmap.  Domain is 0 (low) to 1 (high).\n                    // Begin color ramp at 0-stop with a 0-transparancy color\n                    // to create a blur-like effect.\n                    'heatmap-color': [\n                        'interpolate', ['linear'], ['heatmap-density'],\n                        0, 'rgba(255,237,68,0)', 0.05, 'rgb(72,244,66)', 0.15, 'rgb(68,102,237)',\n                        0.4, 'rgb(249,169,0)', 0.6, 'rgb(255,52,45)', 0.8, 'rgb(233,3,8)', 1, 'rgb(199,5,9)'\n                    ],\n                    // Adjust the heatmap radius by zoom level\n                    'heatmap-radius': [\n                        'interpolate', ['linear'], ['zoom'], 0, 2, 9, 20\n                    ],\n                    // Transition from heatmap to circle layer by zoom level\n                    'heatmap-opacity': ['interpolate', ['linear'], ['zoom'], 7, 1, 15, 0]\n                },\n                //filter: ['<=', ['number', ['get', 'timestamp']], this.state.date]\n            },\n                'waterway-label'\n            );\n\n\n            map.addLayer({\n                'id': 'covid-point',\n                'type': 'circle',\n                'source': 'covid-cities-daily',\n                'minzoom': 8,\n                'paint': {\n                    // Size circle radius by earthquake magnitude and zoom level\n                    'circle-radius': [\n                        'interpolate', ['linear'], ['zoom'],\n                        7,\n                        ['interpolate', ['linear'], ['number', ['get', 'totalCases']], 1, 1, 6, 4],\n                        16,\n                        ['interpolate', ['linear'], ['number', ['get', 'totalCases']], 1, 5, 6, 50]\n                    ],\n                    // Color circle by earthquake magnitude\n                    'circle-color': [\n                        'interpolate', ['linear'], ['number', ['get', 'totalCases']],\n                        1, 'rgba(33,102,172,0)', 2, 'rgb(178,24,43)'\n                    ],\n                    'circle-stroke-color': 'white', 'circle-stroke-width': 1,\n                    'circle-opacity': ['interpolate', ['linear'], ['zoom'], 7, 0, 8, 1]\n                },\n                //filter: ['==', ['number', ['get', 'timestamp']], this.state.date],\n            },\n                'waterway-label'\n            );\n\n            map.addLayer({\n                'id': 'all-cities',\n                'type': 'circle',\n                'source': 'covid',\n                'minzoom': 5,\n                'paint': {\n                    'circle-color': 'rgba(0,0,0,0)',\n                    'circle-stroke-width': 0,\n                },\n            },\n            );\n\n        });\n\n        map.on('idle', () => {\n            this.onSourceLoadFinished && !this.state.animate && this.onSourceLoadFinished()\n        })\n    }\n}\n\n\n\nexport default MapBox;","import React from 'react'\n\nconst SimpleLink = ({ children, url, text, style, target='_blank'}) => {\n\n    if(children){\n        return (\n            <a href={url} style={style} target={target}>\n                {children}\n            </a>\n        )\n    }\n    if(text){\n        return (<a href={url} style={style} target={target}>{text}</a>)\n    }\n    return <a href={url} style={style} target={target}>{url}</a>\n}\nexport default SimpleLink","import React from 'react'\nimport SimpleLink from './Link'\n\nexport default function Footer() {\n    return (\n        <div className='footer'>\n\n            <strong style={{'fontSize': '1.2em'}}>Importante:</strong>\n            <p>Não sou especialista em visualização de dados nem em disseminação de doenças, então\n            não confie nos dados deste site, é apenas uma tentativa de visualizar a disseminação\n            da doença e pode (certamente não) corresponder com a realdade.</p>\n            \n            <p>\n            Então lembre-se de considerar que qualquer dado pode parecer mais ou menos alarmante \n            dependendo da forma como é apresentado e que eu não tenho a competência necessária\n            para availiar isso de forma totalmente correta.\n            </p>\n\n            <p>\n            Sugestões ou correções podem e dever ser enviadas pelo GitHub (link a seguir).\n            </p>\n\n            <hr/>\n\n            <p>\n                <strong>Meu perfil no GitHub:  </strong>\n\n                <SimpleLink url='https://github.com/ALREstevam' />\n            </p>\n            \n            <p>\n                <strong>Repositórios deste projeto no GitHub:  </strong>\n                <SimpleLink url='https://github.com/ALREstevam/covid19-br-vis-back'/>\n                <span> e </span>\n                <SimpleLink url='https://github.com/ALREstevam/covid19-br-vis-back'/>\n                <span>.</span>\n            </p>\n            \n        </div>\n    )\n}\n","import React, { Component } from 'react';\nimport { getCitiesBrJson } from '../requests/covid'\nimport MapBox from './MapBox'\n//import MyResponsiveLine from './LogPlot'\nimport LoadingBar from 'react-top-loading-bar';\nimport Footer from './Footer'\n\nclass MainPage extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            covidCasesGeoJson: undefined,\n            covidCasesJson: undefined,\n            loadingBarProgress: 0,\n        }\n\n        this.timers = []\n\n    }\n\n    clearIntervals() {\n        for (let timer of this.timers) {\n            clearInterval(timer)\n        }\n    }\n\n    add(value) {\n        this.setState({\n            loadingBarProgress: this.state.loadingBarProgress + value\n        })\n    }\n\n    complete = () => {\n        this.setState({ loadingBarProgress: 100 })\n        this.clearIntervals()\n    }\n\n    onLoaderFinished = () => {\n        this.setState({ loadingBarProgress: 0 })\n    }\n\n    infiniteLoad = () => {\n        this.setState({\n            loadingBarProgress: this.state.loadingBarProgress + Math.round(5 + Math.random() * 5)\n        })\n\n        this.timers.push(setInterval(\n            () => {\n                this.setState({\n                    loadingBarProgress: this.state.loadingBarProgress + Math.round(Math.random() * 5)\n                })\n            },\n            800\n        ))\n\n    }\n\n\n\n    render() {\n        return (\n            <div>\n                <LoadingBar\n                    progress={this.state.loadingBarProgress}\n                    height={3}\n                    color='red'\n                    onLoaderFinished={() => this.onLoaderFinished()}\n                />\n                <MapBox style={{ right: 0, left: 0, height: '95vh', width: '100%' }}\n                    data={this.state.covidCasesGeoJson}\n                    zoom={3} lat={-13.5958} lng={-54.4587}\n                    onSourceLoadBegin={this.infiniteLoad}\n                    onSourceLoadFinished={() => { this.complete() }}\n                />\n                {/*<div style={{ width: '100%', height: '100vh', backgroundColor: 'red' }}>\n                    <MyResponsiveLine />\n                </div>*/}\n                <Footer/>\n            </div>\n        );\n    }\n\n    componentDidMount() {\n    }\n\n    componentWillUnmount() {\n        this.clearIntervals()\n    }\n}\n\nexport default MainPage;\n","import React from 'react';\nimport './App.css';\nimport MainPage from './components/MainPage'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <MainPage/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}